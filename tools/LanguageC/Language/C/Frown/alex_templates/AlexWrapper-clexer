

-- Users must import these libs 

-- import Control.Monad
-- import Control.Monad.State
-- import Control.Monad.Error
-- import Data.Set  (Set)
-- import qualified Data.Set as Set (fromList, insert, member, delete, empty)




-- -----------------------------------------------------------------------------
-- Alex wrapper code.
--
-- This code is in the PUBLIC DOMAIN; you may copy it freely and use
-- it for any purpose whatsoever.

-- -----------------------------------------------------------------------------
-- The input type


type AlexInput = (AlexPosn,   -- current position,
                  Char,   -- previous char
                  String) -- current input string


alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p,c,s) = c

alexGetChar :: AlexInput -> Maybe (Char,AlexInput)
alexGetChar (p,c,[]) = Nothing
alexGetChar (p,_,(c:s))  = let p' = alexMove p c in p' `seq`
        Just (c, (p', c, s))

-- -----------------------------------------------------------------------------
-- Token positions

-- `Posn' records the location of a token in the input text.  It has three
-- fields: the address (number of chacaters preceding the token), line number
-- and column of a token within the file. `start_pos' gives the position of the
-- start of the file and `eof_pos' a standard encoding for the end of file.
-- `move_pos' calculates the new position after traversing a given character,
-- assuming the usual eight character tab stops.

data AlexPosn = AlexPn !Int !Int !Int 
  deriving (Eq,Show)

alexStartPos :: AlexPosn
alexStartPos = AlexPn 0 1 1

alexMove :: AlexPosn -> Char -> AlexPosn
alexMove (AlexPn a l c) '\t' = AlexPn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (AlexPn a l c) '\n' = AlexPn (a+1) (l+1)   1
alexMove (AlexPn a l c) _    = AlexPn (a+1)  l     (c+1)


-- -----------------------------------------------------------------------------
-- Default monad


data AlexState = AlexState {
  alex_file     :: FilePath,    -- the current file name
  alex_pos      :: !AlexPosn,   -- position at current input location
  alex_inp      :: String,      -- the current input
  alex_chr      :: !Char,       -- the character before the input
  alex_scd      :: !Int,        -- the current startcode
  alex_line     :: String,      -- the current line for error messages
  tyidents      :: (Set Ident)
  }
  deriving (Show)



type Lexer = StateT AlexState (Either String)


current :: String -> String
current s = takeWhile (/= '\n') s

mkAlexState :: String -> FilePath -> AlexState
mkAlexState input filename = AlexState
  { alex_file   = filename,
    alex_pos    = alexStartPos,
    alex_inp    = input,
    alex_chr    = '\n',
    alex_scd    = 0,
    alex_line   = current input,
    tyidents    = Set.empty }


alexSetInput :: AlexInput -> Lexer ()
alexSetInput (pos,'\n',inp) = do
  modify (\s -> s{alex_pos=pos,alex_chr='\n',alex_inp=inp,alex_line=line}) 
  where line = current inp

        
alexSetInput (pos,c,inp) = do
  modify (\s -> s{alex_pos=pos,alex_chr=c,alex_inp=inp})
      

alexGetInput :: Lexer AlexInput
alexGetInput = do
  pos   <- gets alex_pos 
  c     <- gets alex_chr
  inp   <- gets alex_inp
  return (pos,c,inp)


alexGetPosition :: Lexer (String,Int,Int)
alexGetPosition = do
  (AlexPn _ l c) <- gets alex_pos
  s              <- gets alex_file
  return (s,l,c)

alexError :: String -> Lexer a
alexError message = lift (throwError message)
  
alexGetStartCode :: Lexer Int
alexGetStartCode = do
  sc <- gets alex_scd
  return sc

alexSetStartCode :: Int -> Lexer ()
alexSetStartCode sc = do
  modify (\s -> s{alex_scd=sc})

alexGetLine :: Lexer String
alexGetLine = do
  ln <- gets alex_line
  return ln
  

alexMonadScan = 
  do{ inp <- alexGetInput
    ; sc <- alexGetStartCode  
    ; case alexScan inp sc of
      AlexEOF -> return alexEOF
      AlexError inp' -> do { line <- alexGetLine
                           ; alexError ("\n*** lexical error at "
                                        ++ position inp' ++ ":\n"
                                        ++ context inp' line)}
      AlexSkip  inp' len -> do{ alexSetInput inp'
                              ; alexMonadScan }
      AlexToken inp' len action -> do{ alexSetInput inp'
                                     ; action inp len }
    }

-- -----------------------------------------------------------------------------
-- Useful token actions

type AlexAction result = AlexInput -> Int -> result

-- just ignore this token and scan another one
-- skip :: AlexAction result
skip input len = alexMonadScan

-- ignore this token, but set the start code to a new value
-- begin :: Int -> AlexAction result
begin code input len = do alexSetStartCode code; alexMonadScan

-- perform an action for this token, and set the start code to a new value
-- andBegin :: AlexAction result -> Int -> AlexAction result
(action `andBegin` code) input len = do alexSetStartCode code; action input len

-- token :: (String -> Int -> token) -> AlexAction token
token t input len = return (t input len)


-- -----------------------------------------------------------------------------
-- Frown error reporting


position :: AlexInput -> String
position ((AlexPn _ line col),_,_) 
  = "(line " ++ show line ++ ", column " ++ show col ++ ")"

context :: AlexInput -> String -> String
context ((AlexPn _ _ col),_,rest) line = unlines (line:cursor:nextfive)
  where cursor  = replicate (col-1) ' ' ++ "^"
        nextfive = take 5 (drop 1 (lines rest))
  
        
  

runLex :: String -> FilePath -> Lexer a -> Either String a
runLex input filename f 
  = case runStateT f (mkAlexState input filename) of
      Left err -> Left err
      Right (a,_) -> Right a



