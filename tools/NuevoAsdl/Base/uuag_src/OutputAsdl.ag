-- (22/12/06) Think this may be better from Abs Syntax


{
module Gen.OutputAsdl
  ( outputAsdl
  ) where

import Base.PrimitiveTypes
import Base.AsdlConcreteSyn

import Util.PPExt

import PPrint


}


INCLUDE "AsdlConcreteSynDEFS.ag"



ATTR AltThree ModuleDefn PrimModule ViewDefn ImportStmt Definition 
     AsdlType Constr Field AsdlPrim 
     Cardinality OptQualifier OptIdentifier
            [ | | pp : Doc ]

ATTR AsdlSpec ImportStmts Definitions Fields Constrs [ | | pp USE {:} {[]} : {[Doc]} ]

SEM AltThree
  | Alt1        lhs.pp  = @a.pp
  | Alt2        lhs.pp  = @a.pp
  | Alt3        lhs.pp  = @a.pp

SEM ModuleDefn
  | Module      lhs   .   pp  = text "module" <+> text @name 
                                  <> encloseSepO (text " (") rparen space @importlist.pp
                                  <+> lbrace
                                  <$> indent 2 (encloseSep line line line @defs.pp)
                                  <$> rbrace
SEM PrimModule                                  
  | PrimModule  lhs   .   pp  = text "PrimModule to do"
  
SEM ViewDefn  
  | View        lhs   .   pp  = text "View to do"
                     

SEM ImportStmt
  | ImportStmt  lhs   .   pp  = text "imports" <+> text @name
                                    

SEM Definition
  | Def         lhs   .   pp  = fill 10 (text @name) <+> align @dtype.pp

SEM AsdlType
  | Sum         lhs   .   pp  = encloseSepO (equals <> space) 
                                            empty 
                                            (text "| ") 
                                            @constrs.pp
                                            
  | Prod        lhs   .   pp  = equals <+> tupled @fields.pp 
  

SEM Constr
  | Constr      lhs   .   pp  = text @label 
                                  <> encloseSepO lparen rparen commaspace @fields.pp

SEM Field
  | Field       lhs   .   pp  = @qual.pp <> @ptype.pp <> @card.pp <> @opt_name.pp

SEM OptQualifier 
  | Just        lhs   .   pp  = text @just <> char '.'
  | Nothing     lhs   .   pp  = empty

SEM OptIdentifier
  | Just        lhs   .   pp  = space <> text @just
  | Nothing     lhs   .   pp  = empty
  
  
SEM AsdlPrim    
  | TyUnit          lhs   .   pp  = empty    
  | TyString        lhs   .   pp  = text "string"    
  | TyInt           lhs   .   pp  = text "int"     
  | TyIdentifier    lhs   .   pp  = text "identifier"     
  | TyRef           lhs   .   pp  = text @name


SEM Cardinality 
  | One         lhs   .   pp  = empty
  | Opt         lhs   .   pp  = char '?'
  | Zom         lhs   .   pp  = char '*'  

{

outputAsdl :: AsdlSpec -> Doc
outputAsdl spec = vsep $ pp_Syn_AsdlSpec synthesized
  where synthesized = wrap_AsdlSpec (sem_AsdlSpec spec) inherited
        inherited   = Inh_AsdlSpec



       
}

  
  