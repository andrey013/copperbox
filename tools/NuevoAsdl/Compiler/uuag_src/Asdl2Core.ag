

{
module Gen.Asdl2Core 
  ( transformToCore
  ) where


import Base.PrimitiveTypes
import Base.AsdlConcreteSyn

import qualified Gen.AsdlCoreAbsSyn as AS

import Data.Maybe

}

INCLUDE "AsdlConcreteSynDEFS.ag"



ATTR ModuleDefns [ | | conv USE {:} {[]} : {[AS.Decl]} ]

ATTR ModuleDefn [ | | conv : {AS.Decl} ]

SEM ModuleDefn
  | Module        lhs.conv    = AS.Module @name @defs.toDefinitions



ATTR Definitions    [ | | toDefinitions : {AS.Definitions} ]

SEM Definitions 
  | Cons          lhs.toDefinitions    = @hd.toDefinition : @tl.toDefinitions
  | Nil           lhs.toDefinitions    = []
  
  
ATTR Definition [ | | toDefinition : { AS.Definition } ]

SEM Definition
  | Def           lhs.toDefinition      = AS.Def @name @dtype.toAsdlType


      
ATTR AsdlType [ | | toAsdlType : { AS.AsdlType } ]

SEM AsdlType 
  | Sum           lhs.toAsdlType        = AS.Sum @constrs.toConstrs
                  constrs.core_attribs  = @opt_attribs.toFields
                  
  | Prod          lhs.toAsdlType        = AS.Prod @fields.toFields

ATTR Constrs    [ core_attribs : {AS.Fields} | | ]
ATTR Constrs    [ | | toConstrs : {AS.Constrs} ]

SEM Constrs 
  | Cons          lhs.toConstrs    = @hd.toConstr : @tl.toConstrs
  | Nil           lhs.toConstrs    = []
  
  
  
ATTR Constr [ core_attribs : {AS.Fields} | | toConstr : {AS.Constr} ]

SEM Constr  
  | Constr        lhs.toConstr    = AS.Constr @label 
                                             (@lhs.core_attribs ++ @fields.toFields)
  
  
ATTR Fields    [ | | toFields : {AS.Fields} ]

SEM Fields 
  | Cons          lhs.toFields    = @hd.toField : @tl.toFields
  | Nil           lhs.toFields    = []
  
  
ATTR Field [ | | toField : {AS.Field} ]

SEM Field 
  | Field
      lhs.toField    = AS.Field @qual.identity 
                               @ptype.toAsdlPrim 
                               @card.toCardinality 
                               @opt_name.identity

-- to do extend for imported primitives 
ATTR AsdlPrim   [ | | toAsdlPrim : {AS.AsdlPrim} ]

SEM AsdlPrim
  | TyUnit          lhs.toAsdlPrim    = AS.TyUnit
  | TyString        lhs.toAsdlPrim    = AS.TyString
  | TyInt           lhs.toAsdlPrim    = AS.TyInt
  | TyIdentifier    lhs.toAsdlPrim    = AS.TyIdentifier
  | TyRef           lhs.toAsdlPrim    = AS.TyRef @name

          

ATTR Cardinality  [ | | toCardinality : {AS.Cardinality} ]

SEM Cardinality 
  | One             lhs.toCardinality    = AS.One
  | Zom             lhs.toCardinality    = AS.Zom
  | Opt             lhs.toCardinality    = AS.Opt
              
ATTR OptIdentifier [ | | identity : SELF ]   
ATTR OptQualifier [ | | identity : SELF ]   


ATTR OptAttribs [ | | toFields : {AS.Fields} ]

SEM OptAttribs
  | Just          lhs.toFields    = @just.toFields
  | Nothing       lhs.toFields    = []
  
ATTR Attribs    [ | | toFields : {AS.Fields} ]

SEM Attribs 
  | Cons          lhs.toFields    = @hd.toField : @tl.toFields
  | Nil           lhs.toFields    = []
  


  
{

transformToCore :: [ModuleDefn] -> AS.AsdlSpec
transformToCore defs = AS.AsdlSpec $ conv_Syn_ModuleDefns synthesized
    where synthesized = wrap_ModuleDefns (sem_ModuleDefns defs) inherited
          inherited   = Inh_ModuleDefns

}  