-- TODO
-- EVERYTHING -- this is just the Asdl code copy-pasted




{
module Gen.OCamlGenATermPkl
  ( makeOCamlATermPklCode
  ) where


import Base.Lib
import Ext.Caml.AstConstruction
import qualified Gen.OCamlAbsSyn as OC


}

INCLUDE "AsdlCoreAbsSynDEFS.ag"

ATTR AsdlSpec Decls Decl Definitions Definition [ env : {Env} | | ]

ATTR AsdlSpec [ | | mkProgram : {OC.Program} ]

SEM AsdlSpec
  | AsdlSpec    
      lhs.mkProgram       = OC.Program @decls.mkDef 

ATTR Decls [ | | mkDef USE {:} {[]} : {[OC.Def]} ]

ATTR Decl [ | | mkDef : {OC.Def} ]

SEM Decl
  | Module
      lhs.mkDef            = OC.MLetrec @defs.mkLetBinding
      
ATTR Definitions [ | | mkLetBinding USE {:} {[]} : {[OC.LetBinding]} ]


ATTR Definition [ | | mkLetBinding : {OC.LetBinding} ]

SEM Definition
  | Def 
      lhs.mkLetBinding      = OC.ValueBinding ("write_" ++ @name)
                                              [(param "x"), (param "s")] 
                                              Nothing           -- : type name
                                              @loc.expr
      loc.expr              = if (@name `elem` @lhs.env )
                              then @dtype.mkRecordExpr
                              else @dtype.mkExpr

                                         
ATTR AsdlType [ | | mkExpr : {OC.Expr} ]

SEM AsdlType
  | Sum     
      lhs.mkExpr            =  OC.Match (var "x") @constrs.mkPatternClause
      constrs.number        = 1
  
  | Prod
      lhs.mkExpr            = tupleCode @fields.tupleInfo

ATTR AsdlType [ | | mkRecordExpr : {OC.Expr} ]

SEM AsdlType
  | Sum     
      lhs.mkRecordExpr      = error "mkRecordExpr (Sum) to do" -- OC.Match (var "x") @constrs.mkPatternClause
  
  | Prod
      lhs.mkRecordExpr      = recordCode @fields.recordInfo


ATTR Constrs  [ | | mkPatternClause USE {:} {[]} : {[OC.PatternClause]} ]


ATTR Constr  [ | | mkPatternClause : {OC.PatternClause} ]

SEM Constr
  | Constr
      lhs.mkPatternClause   = (patConstr @label @fields.count, 
                                Nothing, 
                                constrCode @lhs.number @fields.tupleInfo)
      
      


ATTR Fields [ | | count : Int ]

SEM Fields
  | Cons      lhs.count = @tl.count + 1
  | Nil       lhs.count = 0

ATTR Fields [ | | tupleInfo USE {:} {[]} : {[(String, Cardinality)]} ]


ATTR Field [ | | tupleInfo : {(String, Cardinality)} ]

SEM Field
  | Field
      lhs.tupleInfo         = (@ptype.pklrname, @card.identity)


ATTR Fields [ | | recordInfo USE {:} {[]} : {[(String, Cardinality, (Maybe String))]} ]


ATTR Field [ | | recordInfo : {(String, Cardinality, (Maybe String))} ]

SEM Field
  | Field
      lhs.recordInfo         = (@ptype.pklrname, @card.identity, @opt_name.identity)
      
      
ATTR AsdlPrim [ | | pklrname : String ]

SEM AsdlPrim
  | TyUnit            lhs.pklrname  = "punit"
  | TyString          lhs.pklrname  = "pstring"
  | TyInt             lhs.pklrname  = "pinteger"
  | TyIdentifier      lhs.pklrname  = "pstring"      
  | TyRef             lhs.pklrname  = "write_" ++ @name
  | TyExternalPrim    lhs.pklrname  = "write_" ++ @name
            
                  


ATTR Constrs [ | number : Int |  ]

SEM Constrs
  | Cons    tl.number       = @lhs.number + 1

ATTR Constr [ number : Int | | ]


ATTR AsdlPrim [ | | identity : SELF ]

ATTR Cardinality [ | | identity : SELF ]

ATTR OptIdentifier    [ | | identity : SELF ]

{

type Env = [String]


makeOCamlATermPklCode :: AsdlSpec -> Env -> OC.Program
makeOCamlATermPklCode defn env = mkProgram_Syn_AsdlSpec synthesized
  where synthesized = wrap_AsdlSpec (sem_AsdlSpec defn) inherited
        inherited   = Inh_AsdlSpec env


}

