

{
module Gen.OutputOCamlExpr
  ( outputOCamlExprs
  ) where

import Base.PrimitiveTypes

import Gen.OCamlAbsSyn

import Util.PPExt

import PPrint


}

INCLUDE "OCamlAbsSynDEFS.ag"


ATTR Program Def Expr LetBinding 
    Constant Constr Field TypeExpr
    PatternClause Pattern ValuePath
    Parameter Argument
  [ | | pp : {Doc} ]

ATTR Defs Exprs LetBindings TypeExprs PatternMatching Parameters 
    Arguments Patterns
  [ | | pp USE {:} {[]} : {[Doc]} ]

SEM Program
  | Program         lhs.pp    = vsep $ @defs.pp



SEM Def
  | MLet            lhs.pp    = encloseSep (text "let ")
                                           empty
                                           (text " and ")
                                           @binds.pp
  | MLetrec         lhs.pp    = encloseSep (text "let rec ")
                                           empty
                                           (text " and ")
                                           @binds.pp
SEM Expr
  | ValuePathExpr   lhs.pp    = @value_path.pp
  | ConstantExpr    lhs.pp    = @value.pp
  | ParenExpr       lhs.pp    = parens $ @expr.pp
  | TupleExpr       lhs.pp    = tupled @exprs.pp
  | ConstrApp       lhs.pp    = @constr.pp <+> @expr.pp
  | ListExpr        lhs.pp    = encloseSep lbracket rbracket semi @exprs.pp
  | App             lhs.pp    = @expr.pp <> manySpaced @args.pp
  | FieldAccess     lhs.pp    = @expr.pp <.> @field.pp
  | IfExpr          lhs.pp    = text "if" <+> @cond_expr.pp 
                                <+> text "then" <+> @then_expr.pp
                                <> optElse @opt_else.pp
  | Seq             lhs.pp    = align (@expr1.pp <+> semi <> line <> @expr2.pp)
  | Match           lhs.pp    = matchWith @expr.pp @pat_match.pp
                                             
  | Let             lhs.pp    = encloseSep (text "let ")
                                           empty
                                           (text "and ")
                                           @binds.pp
                                <+> text "in" <+> @expr.pp
                                
  | Letrec          lhs.pp    = encloseSep (text "let rec ")
                                           empty
                                           (line <> text "and ")
                                           @binds.pp
                                <+> text "in" <+> @expr.pp

ATTR OptExpr  [ | | pp : {(Maybe Doc)} ]

SEM OptExpr
  | Just            lhs.pp    = Just $ @just.pp
  | Nothing         lhs.pp    = Nothing

SEM Constant
  | IntegerLiteral    lhs.pp  = int @value
  | FloatLiteral      lhs.pp  = float @value
  | StringLiteral     lhs.pp  = dquotes (text @value)
  | Val_True          lhs.pp  = text "true"
  | Val_False         lhs.pp  = text "false"
  | Unit              lhs.pp  = text "()"
  | Nil               lhs.pp  = text "[]"

SEM Constr 
  | Tuple           lhs.pp  = prefix @module_path.identity <> text @constr_name


SEM Field
  | Tuple           lhs.pp  = prefix @module_path.identity <> text @field_name


SEM ValuePath
  | Tuple           lhs.pp  = prefix @module_path.identity <> text @value_name



ATTR OptIdentifier [ | | identity : SELF ]           



SEM LetBinding 
  | PatternBinding  lhs.pp  = @pat.pp <=> @expr.pp
  | ValueBinding    lhs.pp  = text @val_name 
                               <> manySpaced @params.pp
                               <> optColon @opt_ty.pp
                               <=> @expr.pp
              

SEM Pattern 
  | ValuePat        lhs.pp  = text @name
  | AnonPat         lhs.pp  = char '_'
  | ConstantPat     lhs.pp  = @constant.pp
  | ParenPat        lhs.pp  = parens $ @pat.pp <> optColon @opt_ty_expr.pp 
  | ConstrPat       lhs.pp  = @constr.pp <+> @pat.pp
  | TuplePat        lhs.pp  = encloseSepAlt empty empty (text ",") @pats.pp

SEM TypeExpr
  | TyExprVar       lhs.pp      = text @label
  | TyExprAnon      lhs.pp      = char '_'
  | TyExprConstr    lhs.pp      = text @constr_name
  | TyExprConstrApp lhs.pp      = @ty_expr.pp <+> @ty_constr.pp
  | TyExprTuple     lhs.pp      = starSep @ty_exprs.pp  
      
      
ATTR OptTypeExpr [ | | pp : {(Maybe Doc)} ]     

SEM OptTypeExpr
  | Just            lhs.pp      = Just @just.pp
  | Nothing         lhs.pp      = Nothing


SEM PatternClause 
  | Tuple           lhs.pp    = @pat.pp <> optWhen @opt_guard.pp 
                                  <+> text "->" <+> @expr.pp


SEM Parameter
  | ParamPat        lhs.pp    = @pat.pp


SEM Argument 
  | ArgExpr         lhs.pp    = @expr.pp
                           
{

manySpaced []   = empty
manySpaced xs   = space <> hsep xs

optWhen (Just doc)  = space <> text "when" <+> doc
optWhen Nothing     = empty 


optElse (Just doc)  = space <> text "else" <+> doc
optElse Nothing     = empty 

optIn (Just doc)  = space <> text "in" <+> doc
optIn Nothing     = empty 

optColon (Just doc)  = space <> colon <+> doc
optColon Nothing     = empty 

prefix (Just str) = text str <> dot
prefix Nothing    = empty

outputOCamlExprs :: Program -> Doc
outputOCamlExprs prog = pp_Syn_Program synthesized
  where synthesized = wrap_Program (sem_Program prog) inherited
        inherited   = Inh_Program


          
}

