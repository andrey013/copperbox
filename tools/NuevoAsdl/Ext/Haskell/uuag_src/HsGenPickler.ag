

{
module Gen.Ext.Haskell.HsGenPickler
  ( makeHsPicklerCode
  ) where


import Base.Lib

import Util.Naming


import Gen.Ext.Haskell.HaskellAbsSyn
  
}



INCLUDE "Gen/Base/AsdlCoreAbsSynDEFS.ag"


ATTR AsdlSpec [ base_name : {String} | | mkModule : {HsModule} ]

SEM AsdlSpec
  | AsdlSpec    
      lhs.mkModule        = HsModule (haskellName @loc.hs_mod_name) 
                                    [ HsImportDecl "AsdlBase"
                                    , HsImportDecl (@lhs.base_name ++ "AbsSyn")
                                    ]
                                    [] -- @decls.mkHsDecl
                                    NoAnno                                   
                                    
      loc.hs_mod_name     = @lhs.base_name ++ "Pkl"
                                                            
      
{-
ATTR Decls [ | | mkHsDecl USE {++} {[]} : {[HsDecl]} ]

ATTR Decl [ | | mkHsDecl : {[HsDecl]} ]

SEM Decl
  | Module
      lhs.mkHsDecl        = @defs.mkHsDecl

ATTR Definitions [ | | mkHsDecl USE {++} {[]} : {[HsDecl]} ]


ATTR Definition [ | | mkHsDecl : {[HsDecl]} ]

SEM Definition
  | Def 
      lhs.mkHsDecl        = (@loc.pkl_ty_sig : @dtype.writeD) 
                            ++ [@loc.upkl_ty_sig, @dtype.readD]

                                 
      loc.pkl_ty_sig      = writePickleSig (haskellName @name)
      loc.upkl_ty_sig     = readPickleSig (haskellName @name)
      dtype.defname       = haskellName @name


ATTR AsdlType Constrs  Constr [ defname : {String} | | ]
                              
ATTR AsdlType [  | | writeD : {[HsDecl]} ]
ATTR AsdlType [  | | readD : {HsDecl} ]


SEM AsdlType
  | Sum
      lhs.writeD          = @constrs.writeD
      lhs.readD           = dtypeReadD @lhs.defname @constrs.readElt
      constrs.number      = 1
  | Prod  
      lhs.writeD          = [tuplePicklerD @lhs.defname @fields.picklr]
      lhs.readD           = tupleReadD @lhs.defname @fields.unpick

ATTR Constrs [ | | writeD USE {:} {[]} : {[HsDecl]} ]

ATTR Constrs [ | | readElt USE {:} {[]} : {[(String,[(String, Cardinality)])]} ]


ATTR Constrs [ | number : Int |  ]

SEM Constrs 
  | Cons        tl.number = @lhs.number + 1 
                hd.number = @lhs.number



ATTR Constr [ number : Int | | ]
ATTR Constr [ | | writeD : {HsDecl} ]

SEM Constr
  | Constr
      lhs.writeD          = constrPicklerD @lhs.defname 
                                           @label
                                           @lhs.number
                                           @fields.picklr

ATTR Constr [ | | readElt : {(String,[(String, Cardinality)])} ]

SEM Constr
  | Constr
      lhs.readElt         = (@label, @fields.unpick)


ATTR Fields [ | | picklr USE {:} {[]} : {[(String, Cardinality)]} ]
ATTR Fields [ | | unpick USE {:} {[]} : {[(String, Cardinality)]} ]

ATTR Field [ | | picklr  : {(String, Cardinality)} ]
ATTR Field [ | | unpick  : {(String, Cardinality)} ]

SEM Field 
  | Field               lhs.picklr    = (@ptype.pickler_name,@card.identity)
                        lhs.unpick    = (@ptype.unpickler_name,@card.identity)
                        
ATTR AsdlPrim [ | | pickler_name  : {String} ]

SEM AsdlPrim
  | TyUnit              lhs.pickler_name    = "punit"
  | TyString            lhs.pickler_name    = "pstring"
  | TyInt               lhs.pickler_name    = "pint"
  | TyIdentifier        lhs.pickler_name    = "pstring"
  | TyRef               lhs.pickler_name    = pname $ haskellName @name
  | TyExternalPrim      lhs.pickler_name    = pname $ haskellName @name

ATTR AsdlPrim [ | | unpickler_name  : {String} ]

SEM AsdlPrim
  | TyUnit              lhs.unpickler_name  = "uunit"
  | TyString            lhs.unpickler_name  = "ustring"
  | TyInt               lhs.unpickler_name  = "uint"
  | TyIdentifier        lhs.unpickler_name  = "ustring"
  | TyRef               lhs.unpickler_name  = uname $ haskellName @name
  | TyExternalPrim      lhs.unpickler_name  = uname $ haskellName @name
  

ATTR Cardinality  [ | | identity : SELF ]
-}  
      
{


uname :: String -> String 
uname "Bool"    = "ubool"
uname "Char"    = "uchar"
uname "Float"   = "ufloat"
uname "Int64"   = "uint64"
uname s         = "read" ++ s


pname :: String -> String
pname "Bool"    = "pbool" 
pname "Char"    = "pchar"
pname "Float"   = "pfloat"
pname "Int64"   = "pint64"
pname s         = "write" ++ s


makeHsPicklerCode :: AsdlSpec -> String -> HsModule
makeHsPicklerCode defn name = mkModule_Syn_AsdlSpec synthesized
  where synthesized = wrap_AsdlSpec (sem_AsdlSpec defn) inherited
        inherited   = Inh_AsdlSpec name




}  