

{

module Gen.Ext.UUAG.OutputUuagTypes 
  ( outputUuag
  ) where

import Base.PrimitiveTypes
import Gen.Ext.UUAG.UuagAbsSyn
import Util.PPExt

import PPrint



}


INCLUDE "Gen/Ext/UUAG/UuagAbsSynDEFS.ag"

ATTR Elem Typ DataAlt TypeBody Field [ | | pp : Doc ]

ATTR Ag DataAlts Fields [ | | pp USE {:} {[]} : {[Doc]} ]



SEM Elem 
  | Data        lhs   .   pp  = text "DATA" <+> text @name 
                                  <$> indent 2 (vcat @alternatives.pp)
                                  
  | Type        lhs   .   pp  = text "TYPE" <+> text @name 
                                  <+> equals 
                                  <+> @type_body.pp


SEM Typ
  | NamedType        lhs.pp       = text @conid
  | CodeBlock        lhs.pp       = braces $ text @codeblock
  
  

SEM DataAlt 
  | DataAlt         lhs.pp      = char '|' <+> fill 16 (text @name) 
                                    <+> align (vcat @fields.pp)
                    fields.ctx  = CtxConstr                                    

SEM TypeBody
  | TB_List         lhs.pp      = brackets @typ.pp
  | TB_Maybe        lhs.pp      = text "MAYBE" <+> @typ.pp
  | TB_Tuple        lhs.pp      = tupled @fields.pp
                    fields.ctx  = CtxTuple


ATTR Fields [ ctx : FCtx | | ]

ATTR Field [ ctx : FCtx | | ]

SEM Field
  | LabelledField   lhs.pp  = case @lhs.ctx of 
                                CtxConstr -> fill 16 (text @name) <+> colon <+> @typ.pp
                                CtxTuple -> (text @name) <>colon <> @typ.pp
  | ConstrField     lhs.pp  = text @conid
  

    
{

outputUuag :: Ag -> Doc
outputUuag xs = linespace $ pp_Syn_Ag synthesized
  where synthesized = wrap_Ag (sem_Ag xs) inherited
        inherited   = Inh_Ag
        
-- Field Context - is it printed as part of a tuple or 
-- as one of a constructor fields        
data FCtx = CtxTuple | CtxConstr
  
}  