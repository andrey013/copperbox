-- do not edit; automatically generated by UU.AG

module Gen.AsdlCore2OCaml 
  ( transformToOCaml
  ) where


import Base.Lib
import qualified Gen.OCamlAbsSyn as OC
import Util.Naming



transformToOCaml :: AsdlSpec -> [OC.TypeDefinition]
transformToOCaml spec = toTyDefsList_Syn_AsdlSpec synthesized
    where synthesized = wrap_AsdlSpec (sem_AsdlSpec spec) inherited
          inherited   = Inh_AsdlSpec

-- (c)onstruct (i)f (n)ot (e)mpty


cine _        []      = Nothing
cine constr   xs      = Just $ constr xs


cardField :: Cardinality -> OC.TypeExpr -> OC.TypeExpr
cardField Zom expr = OC.TyExprConstrApp expr (OC.TyExprConstr "list")
cardField Opt expr = OC.TyExprConstrApp expr (OC.TyExprConstr "option")
cardField _   expr = expr

strOpt :: Maybe String -> Int -> String
strOpt (Just s) _  = s
strOpt Nothing  i  = 'x' : show i


-- AsdlPrim ----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      name                 : String

-}
{-
   local variables for AsdlPrim.TyExternalPrim:

-}
{-
   local variables for AsdlPrim.TyIdentifier:

-}
{-
   local variables for AsdlPrim.TyInt:

-}
{-
   local variables for AsdlPrim.TyRef:

-}
{-
   local variables for AsdlPrim.TyString:

-}
{-
   local variables for AsdlPrim.TyUnit:

-}
-- semantic domain
type T_AsdlPrim = ( (String))
-- cata
sem_AsdlPrim :: (AsdlPrim) ->
                (T_AsdlPrim)
sem_AsdlPrim ((TyExternalPrim (_name))) =
    (sem_AsdlPrim_TyExternalPrim (_name))
sem_AsdlPrim ((TyIdentifier )) =
    (sem_AsdlPrim_TyIdentifier )
sem_AsdlPrim ((TyInt )) =
    (sem_AsdlPrim_TyInt )
sem_AsdlPrim ((TyRef (_name))) =
    (sem_AsdlPrim_TyRef (_name))
sem_AsdlPrim ((TyString )) =
    (sem_AsdlPrim_TyString )
sem_AsdlPrim ((TyUnit )) =
    (sem_AsdlPrim_TyUnit )
data Inh_AsdlPrim = Inh_AsdlPrim {}
data Syn_AsdlPrim = Syn_AsdlPrim {name_Syn_AsdlPrim :: String}
wrap_AsdlPrim :: (T_AsdlPrim) ->
                 (Inh_AsdlPrim) ->
                 (Syn_AsdlPrim)
wrap_AsdlPrim (sem) ((Inh_AsdlPrim )) =
    let ( s1) =
            (sem )
    in  (Syn_AsdlPrim (s1))
sem_AsdlPrim_TyExternalPrim :: (String) ->
                               (T_AsdlPrim)
sem_AsdlPrim_TyExternalPrim (name_) =
    let _lhsOname :: (String)
        -- "AsdlCore2OCaml.ag"(line 88, column 21)
        (_lhsOname@_) =
            name_
    in  ( _lhsOname)
sem_AsdlPrim_TyIdentifier :: (T_AsdlPrim)
sem_AsdlPrim_TyIdentifier  =
    let _lhsOname :: (String)
        -- "AsdlCore2OCaml.ag"(line 86, column 21)
        (_lhsOname@_) =
            "string"
    in  ( _lhsOname)
sem_AsdlPrim_TyInt :: (T_AsdlPrim)
sem_AsdlPrim_TyInt  =
    let _lhsOname :: (String)
        -- "AsdlCore2OCaml.ag"(line 85, column 21)
        (_lhsOname@_) =
            "int"
    in  ( _lhsOname)
sem_AsdlPrim_TyRef :: (String) ->
                      (T_AsdlPrim)
sem_AsdlPrim_TyRef (name_) =
    let _lhsOname :: (String)
        -- "AsdlCore2OCaml.ag"(line 87, column 21)
        (_lhsOname@_) =
            name_
    in  ( _lhsOname)
sem_AsdlPrim_TyString :: (T_AsdlPrim)
sem_AsdlPrim_TyString  =
    let _lhsOname :: (String)
        -- "AsdlCore2OCaml.ag"(line 84, column 21)
        (_lhsOname@_) =
            "string"
    in  ( _lhsOname)
sem_AsdlPrim_TyUnit :: (T_AsdlPrim)
sem_AsdlPrim_TyUnit  =
    let _lhsOname :: (String)
        -- "AsdlCore2OCaml.ag"(line 83, column 21)
        (_lhsOname@_) =
            "unit"
    in  ( _lhsOname)
-- AsdlSpec ----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      toTyDefsList         : [OC.TypeDefinition]

-}
{-
   local variables for AsdlSpec.AsdlSpec:

-}
-- semantic domain
type T_AsdlSpec = ( ([OC.TypeDefinition]))
-- cata
sem_AsdlSpec :: (AsdlSpec) ->
                (T_AsdlSpec)
sem_AsdlSpec ((AsdlSpec (_decls))) =
    (sem_AsdlSpec_AsdlSpec ((sem_Decls (_decls))))
data Inh_AsdlSpec = Inh_AsdlSpec {}
data Syn_AsdlSpec = Syn_AsdlSpec {toTyDefsList_Syn_AsdlSpec :: [OC.TypeDefinition]}
wrap_AsdlSpec :: (T_AsdlSpec) ->
                 (Inh_AsdlSpec) ->
                 (Syn_AsdlSpec)
wrap_AsdlSpec (sem) ((Inh_AsdlSpec )) =
    let ( s1) =
            (sem )
    in  (Syn_AsdlSpec (s1))
sem_AsdlSpec_AsdlSpec :: (T_Decls) ->
                         (T_AsdlSpec)
sem_AsdlSpec_AsdlSpec (decls_) =
    let _lhsOtoTyDefsList :: ([OC.TypeDefinition])
        _declsItoTyDefs :: ([OC.TypeDefinition])
        ( _declsItoTyDefs) =
            (decls_ )
        -- "AsdlCore2OCaml.ag"(line 21, column 17)
        (_lhsOtoTyDefsList@_) =
            _declsItoTyDefs
    in  ( _lhsOtoTyDefsList)
-- AsdlType ----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      toTyInfo             : OC.TyInfo

-}
{-
   local variables for AsdlType.Prod:

-}
{-
   local variables for AsdlType.Sum:

-}
-- semantic domain
type T_AsdlType = ( (OC.TyInfo))
-- cata
sem_AsdlType :: (AsdlType) ->
                (T_AsdlType)
sem_AsdlType ((Prod (_fields))) =
    (sem_AsdlType_Prod ((sem_Fields (_fields))))
sem_AsdlType ((Sum (_constrs))) =
    (sem_AsdlType_Sum ((sem_Constrs (_constrs))))
data Inh_AsdlType = Inh_AsdlType {}
data Syn_AsdlType = Syn_AsdlType {toTyInfo_Syn_AsdlType :: OC.TyInfo}
wrap_AsdlType :: (T_AsdlType) ->
                 (Inh_AsdlType) ->
                 (Syn_AsdlType)
wrap_AsdlType (sem) ((Inh_AsdlType )) =
    let ( s1) =
            (sem )
    in  (Syn_AsdlType (s1))
sem_AsdlType_Prod :: (T_Fields) ->
                     (T_AsdlType)
sem_AsdlType_Prod (fields_) =
    let _lhsOtoTyInfo :: (OC.TyInfo)
        _fieldsInumber :: (Int)
        _fieldsItoFieldDecl :: ([OC.FieldDecl])
        _fieldsItoTypeExpr :: ([OC.TypeExpr])
        _fieldsOnumber :: (Int)
        ( _fieldsInumber,_fieldsItoFieldDecl,_fieldsItoTypeExpr) =
            (fields_ (_fieldsOnumber))
        -- "AsdlCore2OCaml.ag"(line 43, column 17)
        (_fieldsOnumber@_) =
            1
        -- "AsdlCore2OCaml.ag"(line 42, column 17)
        (_lhsOtoTyInfo@_) =
            (Nothing, cine OC.RecordRep _fieldsItoFieldDecl)
    in  ( _lhsOtoTyInfo)
sem_AsdlType_Sum :: (T_Constrs) ->
                    (T_AsdlType)
sem_AsdlType_Sum (constrs_) =
    let _lhsOtoTyInfo :: (OC.TyInfo)
        _constrsItoConstrDecl :: ([OC.ConstrDecl])
        ( _constrsItoConstrDecl) =
            (constrs_ )
        -- "AsdlCore2OCaml.ag"(line 41, column 17)
        (_lhsOtoTyInfo@_) =
            (Nothing, cine OC.ConstrRep _constrsItoConstrDecl)
    in  ( _lhsOtoTyInfo)
-- Cardinality -------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      identity             : SELF

-}
{-
   local variables for Cardinality.One:
      identity

-}
{-
   local variables for Cardinality.Opt:
      identity

-}
{-
   local variables for Cardinality.Zom:
      identity

-}
-- semantic domain
type T_Cardinality = ( (Cardinality))
-- cata
sem_Cardinality :: (Cardinality) ->
                   (T_Cardinality)
sem_Cardinality ((One )) =
    (sem_Cardinality_One )
sem_Cardinality ((Opt )) =
    (sem_Cardinality_Opt )
sem_Cardinality ((Zom )) =
    (sem_Cardinality_Zom )
data Inh_Cardinality = Inh_Cardinality {}
data Syn_Cardinality = Syn_Cardinality {identity_Syn_Cardinality :: Cardinality}
wrap_Cardinality :: (T_Cardinality) ->
                    (Inh_Cardinality) ->
                    (Syn_Cardinality)
wrap_Cardinality (sem) ((Inh_Cardinality )) =
    let ( s1) =
            (sem )
    in  (Syn_Cardinality (s1))
sem_Cardinality_One :: (T_Cardinality)
sem_Cardinality_One  =
    let _lhsOidentity :: (Cardinality)
        -- self rule
        (_identity@_) =
            One
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity)
sem_Cardinality_Opt :: (T_Cardinality)
sem_Cardinality_Opt  =
    let _lhsOidentity :: (Cardinality)
        -- self rule
        (_identity@_) =
            Opt
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity)
sem_Cardinality_Zom :: (T_Cardinality)
sem_Cardinality_Zom  =
    let _lhsOidentity :: (Cardinality)
        -- self rule
        (_identity@_) =
            Zom
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity)
-- Constr ------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      toConstrDecl         : OC.ConstrDecl

-}
{-
   local variables for Constr.Constr:

-}
-- semantic domain
type T_Constr = ( (OC.ConstrDecl))
-- cata
sem_Constr :: (Constr) ->
              (T_Constr)
sem_Constr ((Constr (_label) (_fields))) =
    (sem_Constr_Constr (_label) ((sem_Fields (_fields))))
data Inh_Constr = Inh_Constr {}
data Syn_Constr = Syn_Constr {toConstrDecl_Syn_Constr :: OC.ConstrDecl}
wrap_Constr :: (T_Constr) ->
               (Inh_Constr) ->
               (Syn_Constr)
wrap_Constr (sem) ((Inh_Constr )) =
    let ( s1) =
            (sem )
    in  (Syn_Constr (s1))
sem_Constr_Constr :: (String) ->
                     (T_Fields) ->
                     (T_Constr)
sem_Constr_Constr (label_) (fields_) =
    let _lhsOtoConstrDecl :: (OC.ConstrDecl)
        _fieldsInumber :: (Int)
        _fieldsItoFieldDecl :: ([OC.FieldDecl])
        _fieldsItoTypeExpr :: ([OC.TypeExpr])
        _fieldsOnumber :: (Int)
        ( _fieldsInumber,_fieldsItoFieldDecl,_fieldsItoTypeExpr) =
            (fields_ (_fieldsOnumber))
        -- "AsdlCore2OCaml.ag"(line 53, column 17)
        (_fieldsOnumber@_) =
            1
        -- "AsdlCore2OCaml.ag"(line 52, column 17)
        (_lhsOtoConstrDecl@_) =
            (label_, cine OC.TyExprTuple _fieldsItoTypeExpr)
    in  ( _lhsOtoConstrDecl)
-- Constrs -----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      toConstrDecl         : [OC.ConstrDecl]

-}
{-
   local variables for Constrs.Cons:

-}
{-
   local variables for Constrs.Nil:

-}
-- semantic domain
type T_Constrs = ( ([OC.ConstrDecl]))
-- cata
sem_Constrs :: (Constrs) ->
               (T_Constrs)
sem_Constrs (list) =
    (Prelude.foldr (sem_Constrs_Cons) (sem_Constrs_Nil) ((Prelude.map sem_Constr list)))
data Inh_Constrs = Inh_Constrs {}
data Syn_Constrs = Syn_Constrs {toConstrDecl_Syn_Constrs :: [OC.ConstrDecl]}
wrap_Constrs :: (T_Constrs) ->
                (Inh_Constrs) ->
                (Syn_Constrs)
wrap_Constrs (sem) ((Inh_Constrs )) =
    let ( s1) =
            (sem )
    in  (Syn_Constrs (s1))
sem_Constrs_Cons :: (T_Constr) ->
                    (T_Constrs) ->
                    (T_Constrs)
sem_Constrs_Cons (hd_) (tl_) =
    let _lhsOtoConstrDecl :: ([OC.ConstrDecl])
        _hdItoConstrDecl :: (OC.ConstrDecl)
        _tlItoConstrDecl :: ([OC.ConstrDecl])
        ( _hdItoConstrDecl) =
            (hd_ )
        ( _tlItoConstrDecl) =
            (tl_ )
        -- use rule
        (_lhsOtoConstrDecl@_) =
            _hdItoConstrDecl : _tlItoConstrDecl
    in  ( _lhsOtoConstrDecl)
sem_Constrs_Nil :: (T_Constrs)
sem_Constrs_Nil  =
    let _lhsOtoConstrDecl :: ([OC.ConstrDecl])
        -- use rule
        (_lhsOtoConstrDecl@_) =
            []
    in  ( _lhsOtoConstrDecl)
-- Decl --------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      toTyDefs             : OC.TypeDefinition

-}
{-
   local variables for Decl.Module:

-}
-- semantic domain
type T_Decl = ( (OC.TypeDefinition))
-- cata
sem_Decl :: (Decl) ->
            (T_Decl)
sem_Decl ((Module (_name) (_defs))) =
    (sem_Decl_Module (_name) ((sem_Definitions (_defs))))
data Inh_Decl = Inh_Decl {}
data Syn_Decl = Syn_Decl {toTyDefs_Syn_Decl :: OC.TypeDefinition}
wrap_Decl :: (T_Decl) ->
             (Inh_Decl) ->
             (Syn_Decl)
wrap_Decl (sem) ((Inh_Decl )) =
    let ( s1) =
            (sem )
    in  (Syn_Decl (s1))
sem_Decl_Module :: (String) ->
                   (T_Definitions) ->
                   (T_Decl)
sem_Decl_Module (name_) (defs_) =
    let _lhsOtoTyDefs :: (OC.TypeDefinition)
        _defsItoTyDef :: ([OC.Typedef])
        ( _defsItoTyDef) =
            (defs_ )
        -- "AsdlCore2OCaml.ag"(line 28, column 17)
        (_lhsOtoTyDefs@_) =
            OC.TypeDefinition _defsItoTyDef
    in  ( _lhsOtoTyDefs)
-- Decls -------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      toTyDefs             : [OC.TypeDefinition]

-}
{-
   local variables for Decls.Cons:

-}
{-
   local variables for Decls.Nil:

-}
-- semantic domain
type T_Decls = ( ([OC.TypeDefinition]))
-- cata
sem_Decls :: (Decls) ->
             (T_Decls)
sem_Decls (list) =
    (Prelude.foldr (sem_Decls_Cons) (sem_Decls_Nil) ((Prelude.map sem_Decl list)))
data Inh_Decls = Inh_Decls {}
data Syn_Decls = Syn_Decls {toTyDefs_Syn_Decls :: [OC.TypeDefinition]}
wrap_Decls :: (T_Decls) ->
              (Inh_Decls) ->
              (Syn_Decls)
wrap_Decls (sem) ((Inh_Decls )) =
    let ( s1) =
            (sem )
    in  (Syn_Decls (s1))
sem_Decls_Cons :: (T_Decl) ->
                  (T_Decls) ->
                  (T_Decls)
sem_Decls_Cons (hd_) (tl_) =
    let _lhsOtoTyDefs :: ([OC.TypeDefinition])
        _hdItoTyDefs :: (OC.TypeDefinition)
        _tlItoTyDefs :: ([OC.TypeDefinition])
        ( _hdItoTyDefs) =
            (hd_ )
        ( _tlItoTyDefs) =
            (tl_ )
        -- use rule
        (_lhsOtoTyDefs@_) =
            _hdItoTyDefs : _tlItoTyDefs
    in  ( _lhsOtoTyDefs)
sem_Decls_Nil :: (T_Decls)
sem_Decls_Nil  =
    let _lhsOtoTyDefs :: ([OC.TypeDefinition])
        -- use rule
        (_lhsOtoTyDefs@_) =
            []
    in  ( _lhsOtoTyDefs)
-- Definition --------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      toTyDef              : OC.Typedef 

-}
{-
   local variables for Definition.Def:

-}
-- semantic domain
type T_Definition = ( (OC.Typedef ))
-- cata
sem_Definition :: (Definition) ->
                  (T_Definition)
sem_Definition ((Def (_name) (_dtype))) =
    (sem_Definition_Def (_name) ((sem_AsdlType (_dtype))))
data Inh_Definition = Inh_Definition {}
data Syn_Definition = Syn_Definition {toTyDef_Syn_Definition :: OC.Typedef }
wrap_Definition :: (T_Definition) ->
                   (Inh_Definition) ->
                   (Syn_Definition)
wrap_Definition (sem) ((Inh_Definition )) =
    let ( s1) =
            (sem )
    in  (Syn_Definition (s1))
sem_Definition_Def :: (String) ->
                      (T_AsdlType) ->
                      (T_Definition)
sem_Definition_Def (name_) (dtype_) =
    let _lhsOtoTyDef :: (OC.Typedef )
        _dtypeItoTyInfo :: (OC.TyInfo)
        ( _dtypeItoTyInfo) =
            (dtype_ )
        -- "AsdlCore2OCaml.ag"(line 35, column 17)
        (_lhsOtoTyDef@_) =
            ([], name_, _dtypeItoTyInfo)
    in  ( _lhsOtoTyDef)
-- Definitions -------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      toTyDef              : [OC.Typedef]

-}
{-
   local variables for Definitions.Cons:

-}
{-
   local variables for Definitions.Nil:

-}
-- semantic domain
type T_Definitions = ( ([OC.Typedef]))
-- cata
sem_Definitions :: (Definitions) ->
                   (T_Definitions)
sem_Definitions (list) =
    (Prelude.foldr (sem_Definitions_Cons) (sem_Definitions_Nil) ((Prelude.map sem_Definition list)))
data Inh_Definitions = Inh_Definitions {}
data Syn_Definitions = Syn_Definitions {toTyDef_Syn_Definitions :: [OC.Typedef]}
wrap_Definitions :: (T_Definitions) ->
                    (Inh_Definitions) ->
                    (Syn_Definitions)
wrap_Definitions (sem) ((Inh_Definitions )) =
    let ( s1) =
            (sem )
    in  (Syn_Definitions (s1))
sem_Definitions_Cons :: (T_Definition) ->
                        (T_Definitions) ->
                        (T_Definitions)
sem_Definitions_Cons (hd_) (tl_) =
    let _lhsOtoTyDef :: ([OC.Typedef])
        _hdItoTyDef :: (OC.Typedef )
        _tlItoTyDef :: ([OC.Typedef])
        ( _hdItoTyDef) =
            (hd_ )
        ( _tlItoTyDef) =
            (tl_ )
        -- use rule
        (_lhsOtoTyDef@_) =
            _hdItoTyDef : _tlItoTyDef
    in  ( _lhsOtoTyDef)
sem_Definitions_Nil :: (T_Definitions)
sem_Definitions_Nil  =
    let _lhsOtoTyDef :: ([OC.Typedef])
        -- use rule
        (_lhsOtoTyDef@_) =
            []
    in  ( _lhsOtoTyDef)
-- Field -------------------------------------------------------
{-
   inherited attributes:
      number               : Int

   chained attributes:

   synthesised attributes:
      toFieldDecl          : OC.FieldDecl
      toTypeExpr           : OC.TypeExpr

-}
{-
   local variables for Field.Field:
      expr1

-}
-- semantic domain
type T_Field = (Int) ->
               ( (OC.FieldDecl),(OC.TypeExpr))
-- cata
sem_Field :: (Field) ->
             (T_Field)
sem_Field ((Field (_qual) (_ptype) (_card) (_opt_name))) =
    (sem_Field_Field ((sem_OptQualifier (_qual))) ((sem_AsdlPrim (_ptype))) ((sem_Cardinality (_card))) ((sem_OptIdentifier (_opt_name))))
data Inh_Field = Inh_Field {number_Inh_Field :: Int}
data Syn_Field = Syn_Field {toFieldDecl_Syn_Field :: OC.FieldDecl,toTypeExpr_Syn_Field :: OC.TypeExpr}
wrap_Field :: (T_Field) ->
              (Inh_Field) ->
              (Syn_Field)
wrap_Field (sem) ((Inh_Field (i1))) =
    let ( s1,s2) =
            (sem (i1))
    in  (Syn_Field (s1) (s2))
sem_Field_Field :: (T_OptQualifier) ->
                   (T_AsdlPrim) ->
                   (T_Cardinality) ->
                   (T_OptIdentifier) ->
                   (T_Field)
sem_Field_Field (qual_) (ptype_) (card_) (opt_name_) =
    \ _lhsInumber ->
        let _lhsOtoFieldDecl :: (OC.FieldDecl)
            _lhsOtoTypeExpr :: (OC.TypeExpr)
            _ptypeIname :: (String)
            _cardIidentity :: (Cardinality)
            _opt_nameIidentity :: (OptIdentifier)
            ( _ptypeIname) =
                (ptype_ )
            ( _cardIidentity) =
                (card_ )
            ( _opt_nameIidentity) =
                (opt_name_ )
            -- "AsdlCore2OCaml.ag"(line 61, column 17)
            (_expr1@_) =
                OC.TyExprConstr _ptypeIname
            -- "AsdlCore2OCaml.ag"(line 60, column 17)
            (_lhsOtoTypeExpr@_) =
                cardField _cardIidentity _expr1
            -- "AsdlCore2OCaml.ag"(line 77, column 17)
            (_lhsOtoFieldDecl@_) =
                (strOpt _opt_nameIidentity _lhsInumber, cardField _cardIidentity _expr1    )
        in  ( _lhsOtoFieldDecl,_lhsOtoTypeExpr)
-- Fields ------------------------------------------------------
{-
   inherited attributes:

   chained attributes:
      number               : Int

   synthesised attributes:
      toFieldDecl          : [OC.FieldDecl]
      toTypeExpr           : [OC.TypeExpr]

-}
{-
   local variables for Fields.Cons:

-}
{-
   local variables for Fields.Nil:

-}
-- semantic domain
type T_Fields = (Int) ->
                ( (Int),([OC.FieldDecl]),([OC.TypeExpr]))
-- cata
sem_Fields :: (Fields) ->
              (T_Fields)
sem_Fields (list) =
    (Prelude.foldr (sem_Fields_Cons) (sem_Fields_Nil) ((Prelude.map sem_Field list)))
data Inh_Fields = Inh_Fields {number_Inh_Fields :: Int}
data Syn_Fields = Syn_Fields {number_Syn_Fields :: Int,toFieldDecl_Syn_Fields :: [OC.FieldDecl],toTypeExpr_Syn_Fields :: [OC.TypeExpr]}
wrap_Fields :: (T_Fields) ->
               (Inh_Fields) ->
               (Syn_Fields)
wrap_Fields (sem) ((Inh_Fields (i1))) =
    let ( s1,s2,s3) =
            (sem (i1))
    in  (Syn_Fields (s1) (s2) (s3))
sem_Fields_Cons :: (T_Field) ->
                   (T_Fields) ->
                   (T_Fields)
sem_Fields_Cons (hd_) (tl_) =
    \ _lhsInumber ->
        let _lhsOnumber :: (Int)
            _lhsOtoFieldDecl :: ([OC.FieldDecl])
            _lhsOtoTypeExpr :: ([OC.TypeExpr])
            _hdItoFieldDecl :: (OC.FieldDecl)
            _hdItoTypeExpr :: (OC.TypeExpr)
            _hdOnumber :: (Int)
            _tlInumber :: (Int)
            _tlItoFieldDecl :: ([OC.FieldDecl])
            _tlItoTypeExpr :: ([OC.TypeExpr])
            _tlOnumber :: (Int)
            ( _hdItoFieldDecl,_hdItoTypeExpr) =
                (hd_ (_hdOnumber))
            ( _tlInumber,_tlItoFieldDecl,_tlItoTypeExpr) =
                (tl_ (_tlOnumber))
            -- "AsdlCore2OCaml.ag"(line 68, column 15)
            (_tlOnumber@_) =
                _lhsInumber + 1
            -- use rule
            (_lhsOtoFieldDecl@_) =
                _hdItoFieldDecl : _tlItoFieldDecl
            -- use rule
            (_lhsOtoTypeExpr@_) =
                _hdItoTypeExpr : _tlItoTypeExpr
            -- copy rule (up)
            (_lhsOnumber@_) =
                _tlInumber
            -- copy rule (down)
            (_hdOnumber@_) =
                _lhsInumber
        in  ( _lhsOnumber,_lhsOtoFieldDecl,_lhsOtoTypeExpr)
sem_Fields_Nil :: (T_Fields)
sem_Fields_Nil  =
    \ _lhsInumber ->
        let _lhsOnumber :: (Int)
            _lhsOtoFieldDecl :: ([OC.FieldDecl])
            _lhsOtoTypeExpr :: ([OC.TypeExpr])
            -- use rule
            (_lhsOtoFieldDecl@_) =
                []
            -- use rule
            (_lhsOtoTypeExpr@_) =
                []
            -- copy rule (chain)
            (_lhsOnumber@_) =
                _lhsInumber
        in  ( _lhsOnumber,_lhsOtoFieldDecl,_lhsOtoTypeExpr)
-- OptIdentifier -----------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      identity             : SELF

-}
{-
   local variables for OptIdentifier.Just:
      identity

-}
{-
   local variables for OptIdentifier.Nothing:
      identity

-}
-- semantic domain
type T_OptIdentifier = ( (OptIdentifier))
-- cata
sem_OptIdentifier :: (OptIdentifier) ->
                     (T_OptIdentifier)
sem_OptIdentifier ((Prelude.Just (x))) =
    (sem_OptIdentifier_Just (x))
sem_OptIdentifier (Prelude.Nothing) =
    sem_OptIdentifier_Nothing
data Inh_OptIdentifier = Inh_OptIdentifier {}
data Syn_OptIdentifier = Syn_OptIdentifier {identity_Syn_OptIdentifier :: OptIdentifier}
wrap_OptIdentifier :: (T_OptIdentifier) ->
                      (Inh_OptIdentifier) ->
                      (Syn_OptIdentifier)
wrap_OptIdentifier (sem) ((Inh_OptIdentifier )) =
    let ( s1) =
            (sem )
    in  (Syn_OptIdentifier (s1))
sem_OptIdentifier_Just :: (String) ->
                          (T_OptIdentifier)
sem_OptIdentifier_Just (just_) =
    let _lhsOidentity :: (OptIdentifier)
        -- self rule
        (_identity@_) =
            Just just_
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity)
sem_OptIdentifier_Nothing :: (T_OptIdentifier)
sem_OptIdentifier_Nothing  =
    let _lhsOidentity :: (OptIdentifier)
        -- self rule
        (_identity@_) =
            Nothing
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity)
-- OptQualifier ------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for OptQualifier.Just:

-}
{-
   local variables for OptQualifier.Nothing:

-}
-- semantic domain
type T_OptQualifier = ( )
-- cata
sem_OptQualifier :: (OptQualifier) ->
                    (T_OptQualifier)
sem_OptQualifier ((Prelude.Just (x))) =
    (sem_OptQualifier_Just (x))
sem_OptQualifier (Prelude.Nothing) =
    sem_OptQualifier_Nothing
data Inh_OptQualifier = Inh_OptQualifier {}
data Syn_OptQualifier = Syn_OptQualifier {}
wrap_OptQualifier :: (T_OptQualifier) ->
                     (Inh_OptQualifier) ->
                     (Syn_OptQualifier)
wrap_OptQualifier (sem) ((Inh_OptQualifier )) =
    let 
    in  (Syn_OptQualifier )
sem_OptQualifier_Just :: (String) ->
                         (T_OptQualifier)
sem_OptQualifier_Just (just_) =
    let 
    in  ( )
sem_OptQualifier_Nothing :: (T_OptQualifier)
sem_OptQualifier_Nothing  =
    let 
    in  ( )


