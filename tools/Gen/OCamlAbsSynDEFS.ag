-- Sun Jan 28 15:04:22 GMT Standard Time 2007

DATA Program
  | Program          defs             : Defs

TYPE Defs = [Def]

DATA Def
  | MLet             binds            : LetBindings
  | MLetrec          binds            : LetBindings

TYPE ValuePath = (module_path:OptIdentifier,value_name:String)

DATA ValueName
  | IdVal            value_name       : String
  | OpVal            op_name          : String

DATA TypeDefinition
  | TypeDefinition   defs             : Typedefs

TYPE Typedefs = [Typedef]

TYPE Typedef = (ty_params:TyParams,tycon_name:String,ty_info:TyInfo)

TYPE TyParams = [String]

TYPE TyInfo = (opt_ty_equation:OptTyEquation,opt_ty_rep:OptTyRep)

TYPE OptTyEquation = MAYBE TypeExpr

TYPE OptTyRep = MAYBE TyRep

DATA TyRep
  | ConstrRep        constr_decls     : ConstrDecls
  | RecordRep        field_decls      : FieldDecls

TYPE ConstrDecls = [ConstrDecl]

TYPE ConstrDecl = (constr_name:String,opt_type_expr:OptTypeExpr)

TYPE FieldDecls = [FieldDecl]

TYPE FieldDecl = (field_name:String,ty_expr:TypeExpr)

TYPE Constr = (module_path:OptIdentifier,constr_name:String)

TYPE Field = (module_path:OptIdentifier,field_name:String)

TYPE OptIdentifier = (name:{(Maybe String)})

DATA TypeExpr
  | TyExprVar        label            : String
  | TyExprAnon       
  | TyExprConstr     constr_name      : String
  | TyExprConstrApp  ty_expr          : TypeExpr
                     ty_constr        : TypeExpr
  | TyExprTuple      ty_exprs         : TypeExprs

TYPE OptTypeExpr = MAYBE TypeExpr

TYPE TypeExprs = [TypeExpr]

TYPE Exprs = [Expr]

TYPE OptExpr = MAYBE Expr

DATA Expr
  | ValuePathExpr    value_path       : ValuePath
  | ConstantExpr     value            : Constant
  | ParenExpr        expr             : Expr
  | TupleExpr        exprs            : Exprs
  | ConstrApp        constr           : Constr
                     expr             : Expr
  | ListExpr         exprs            : Exprs
  | App              expr             : Expr
                     args             : Arguments
  | FieldAccess      expr             : Expr
                     field            : Field
  | IfExpr           cond_expr        : Expr
                     then_expr        : Expr
                     opt_else         : OptExpr
  | Seq              expr1            : Expr
                     expr2            : Expr
  | Match            expr             : Expr
                     pat_match        : PatternMatching
  | Let              binds            : LetBindings
                     expr             : Expr
  | Letrec           binds            : LetBindings
                     expr             : Expr

TYPE Arguments = [Argument]

DATA Argument
  | ArgExpr          expr             : Expr

TYPE PatternMatching = [PatternClause]

TYPE PatternClause = (pat:Pattern,opt_guard:OptExpr,expr:Expr)

TYPE LetBindings = [LetBinding]

DATA LetBinding
  | PatternBinding   pat              : Pattern
                     expr             : Expr
  | ValueBinding     val_name         : String
                     params           : Parameters
                     opt_ty           : OptTypeExpr
                     expr             : Expr

TYPE Parameters = [Parameter]

DATA Parameter
  | ParamPat         pat              : Pattern

TYPE Patterns = [Pattern]

DATA Pattern
  | ValuePat         name             : String
  | AnonPat          
  | ConstantPat      constant         : Constant
  | ParenPat         pat              : Pattern
                     opt_ty_expr      : OptTypeExpr
  | ConstrPat        constr           : Constr
                     pat              : Pattern
  | TuplePat         pats             : Patterns

DATA Constant
  | IntegerLiteral   value            : Int
  | FloatLiteral     value            : Float
  | StringLiteral    value            : String
  | Val_True         
  | Val_False        
  | Unit             
  | Nil              
