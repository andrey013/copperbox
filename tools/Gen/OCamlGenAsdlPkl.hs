-- do not edit; automatically generated by UU.AG

module Gen.OCamlGenAsdlPkl
  ( makeOCamlAsdlPklCode
  ) where


import Base.Lib
import Ext.Caml.AstConstruction
import qualified Gen.OCamlAbsSyn as OC




type Env = [String]


makeOCamlAsdlPklCode :: AsdlSpec -> Env -> OC.Program
makeOCamlAsdlPklCode defn env = mkProgram_Syn_AsdlSpec synthesized
  where synthesized = wrap_AsdlSpec (sem_AsdlSpec defn) inherited
        inherited   = Inh_AsdlSpec env


-- AsdlPrim ----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      identity             : SELF
      pklrname             : String

-}
{-
   local variables for AsdlPrim.TyExternalPrim:
      identity

-}
{-
   local variables for AsdlPrim.TyIdentifier:
      identity

-}
{-
   local variables for AsdlPrim.TyInt:
      identity

-}
{-
   local variables for AsdlPrim.TyRef:
      identity

-}
{-
   local variables for AsdlPrim.TyString:
      identity

-}
{-
   local variables for AsdlPrim.TyUnit:
      identity

-}
-- semantic domain
type T_AsdlPrim = ( (AsdlPrim),(String))
-- cata
sem_AsdlPrim :: (AsdlPrim) ->
                (T_AsdlPrim)
sem_AsdlPrim ((TyExternalPrim (_name))) =
    (sem_AsdlPrim_TyExternalPrim (_name))
sem_AsdlPrim ((TyIdentifier )) =
    (sem_AsdlPrim_TyIdentifier )
sem_AsdlPrim ((TyInt )) =
    (sem_AsdlPrim_TyInt )
sem_AsdlPrim ((TyRef (_name))) =
    (sem_AsdlPrim_TyRef (_name))
sem_AsdlPrim ((TyString )) =
    (sem_AsdlPrim_TyString )
sem_AsdlPrim ((TyUnit )) =
    (sem_AsdlPrim_TyUnit )
data Inh_AsdlPrim = Inh_AsdlPrim {}
data Syn_AsdlPrim = Syn_AsdlPrim {identity_Syn_AsdlPrim :: AsdlPrim,pklrname_Syn_AsdlPrim :: String}
wrap_AsdlPrim :: (T_AsdlPrim) ->
                 (Inh_AsdlPrim) ->
                 (Syn_AsdlPrim)
wrap_AsdlPrim (sem) ((Inh_AsdlPrim )) =
    let ( s1,s2) =
            (sem )
    in  (Syn_AsdlPrim (s1) (s2))
sem_AsdlPrim_TyExternalPrim :: (String) ->
                               (T_AsdlPrim)
sem_AsdlPrim_TyExternalPrim (name_) =
    let _lhsOidentity :: (AsdlPrim)
        _lhsOpklrname :: (String)
        -- "OCamlGenAsdlPkl.ag"(line 119, column 23)
        (_lhsOpklrname@_) =
            "write_" ++ name_
        -- self rule
        (_identity@_) =
            TyExternalPrim name_
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity,_lhsOpklrname)
sem_AsdlPrim_TyIdentifier :: (T_AsdlPrim)
sem_AsdlPrim_TyIdentifier  =
    let _lhsOidentity :: (AsdlPrim)
        _lhsOpklrname :: (String)
        -- "OCamlGenAsdlPkl.ag"(line 117, column 23)
        (_lhsOpklrname@_) =
            "pstring"
        -- self rule
        (_identity@_) =
            TyIdentifier
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity,_lhsOpklrname)
sem_AsdlPrim_TyInt :: (T_AsdlPrim)
sem_AsdlPrim_TyInt  =
    let _lhsOidentity :: (AsdlPrim)
        _lhsOpklrname :: (String)
        -- "OCamlGenAsdlPkl.ag"(line 116, column 23)
        (_lhsOpklrname@_) =
            "pinteger"
        -- self rule
        (_identity@_) =
            TyInt
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity,_lhsOpklrname)
sem_AsdlPrim_TyRef :: (String) ->
                      (T_AsdlPrim)
sem_AsdlPrim_TyRef (name_) =
    let _lhsOidentity :: (AsdlPrim)
        _lhsOpklrname :: (String)
        -- "OCamlGenAsdlPkl.ag"(line 118, column 23)
        (_lhsOpklrname@_) =
            "write_" ++ name_
        -- self rule
        (_identity@_) =
            TyRef name_
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity,_lhsOpklrname)
sem_AsdlPrim_TyString :: (T_AsdlPrim)
sem_AsdlPrim_TyString  =
    let _lhsOidentity :: (AsdlPrim)
        _lhsOpklrname :: (String)
        -- "OCamlGenAsdlPkl.ag"(line 115, column 23)
        (_lhsOpklrname@_) =
            "pstring"
        -- self rule
        (_identity@_) =
            TyString
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity,_lhsOpklrname)
sem_AsdlPrim_TyUnit :: (T_AsdlPrim)
sem_AsdlPrim_TyUnit  =
    let _lhsOidentity :: (AsdlPrim)
        _lhsOpklrname :: (String)
        -- "OCamlGenAsdlPkl.ag"(line 114, column 23)
        (_lhsOpklrname@_) =
            "punit"
        -- self rule
        (_identity@_) =
            TyUnit
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity,_lhsOpklrname)
-- AsdlSpec ----------------------------------------------------
{-
   inherited attributes:
      env                  : Env

   chained attributes:

   synthesised attributes:
      mkProgram            : OC.Program

-}
{-
   local variables for AsdlSpec.AsdlSpec:

-}
-- semantic domain
type T_AsdlSpec = (Env) ->
                  ( (OC.Program))
-- cata
sem_AsdlSpec :: (AsdlSpec) ->
                (T_AsdlSpec)
sem_AsdlSpec ((AsdlSpec (_decls))) =
    (sem_AsdlSpec_AsdlSpec ((sem_Decls (_decls))))
data Inh_AsdlSpec = Inh_AsdlSpec {env_Inh_AsdlSpec :: Env}
data Syn_AsdlSpec = Syn_AsdlSpec {mkProgram_Syn_AsdlSpec :: OC.Program}
wrap_AsdlSpec :: (T_AsdlSpec) ->
                 (Inh_AsdlSpec) ->
                 (Syn_AsdlSpec)
wrap_AsdlSpec (sem) ((Inh_AsdlSpec (i1))) =
    let ( s1) =
            (sem (i1))
    in  (Syn_AsdlSpec (s1))
sem_AsdlSpec_AsdlSpec :: (T_Decls) ->
                         (T_AsdlSpec)
sem_AsdlSpec_AsdlSpec (decls_) =
    \ _lhsIenv ->
        let _lhsOmkProgram :: (OC.Program)
            _declsImkDef :: ([OC.Def])
            _declsOenv :: (Env)
            ( _declsImkDef) =
                (decls_ (_declsOenv))
            -- "OCamlGenAsdlPkl.ag"(line 25, column 7)
            (_lhsOmkProgram@_) =
                OC.Program _declsImkDef
            -- copy rule (down)
            (_declsOenv@_) =
                _lhsIenv
        in  ( _lhsOmkProgram)
-- AsdlType ----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      mkExpr               : OC.Expr
      mkRecordExpr         : OC.Expr

-}
{-
   local variables for AsdlType.Prod:

-}
{-
   local variables for AsdlType.Sum:

-}
-- semantic domain
type T_AsdlType = ( (OC.Expr),(OC.Expr))
-- cata
sem_AsdlType :: (AsdlType) ->
                (T_AsdlType)
sem_AsdlType ((Prod (_fields))) =
    (sem_AsdlType_Prod ((sem_Fields (_fields))))
sem_AsdlType ((Sum (_constrs))) =
    (sem_AsdlType_Sum ((sem_Constrs (_constrs))))
data Inh_AsdlType = Inh_AsdlType {}
data Syn_AsdlType = Syn_AsdlType {mkExpr_Syn_AsdlType :: OC.Expr,mkRecordExpr_Syn_AsdlType :: OC.Expr}
wrap_AsdlType :: (T_AsdlType) ->
                 (Inh_AsdlType) ->
                 (Syn_AsdlType)
wrap_AsdlType (sem) ((Inh_AsdlType )) =
    let ( s1,s2) =
            (sem )
    in  (Syn_AsdlType (s1) (s2))
sem_AsdlType_Prod :: (T_Fields) ->
                     (T_AsdlType)
sem_AsdlType_Prod (fields_) =
    let _lhsOmkExpr :: (OC.Expr)
        _lhsOmkRecordExpr :: (OC.Expr)
        _fieldsIcount :: (Int)
        _fieldsIrecordInfo :: ([(String, Cardinality, (Maybe String))])
        _fieldsItupleInfo :: ([(String, Cardinality)])
        ( _fieldsIcount,_fieldsIrecordInfo,_fieldsItupleInfo) =
            (fields_ )
        -- "OCamlGenAsdlPkl.ag"(line 59, column 7)
        (_lhsOmkExpr@_) =
            tupleCode _fieldsItupleInfo
        -- "OCamlGenAsdlPkl.ag"(line 68, column 7)
        (_lhsOmkRecordExpr@_) =
            recordCode _fieldsIrecordInfo
    in  ( _lhsOmkExpr,_lhsOmkRecordExpr)
sem_AsdlType_Sum :: (T_Constrs) ->
                    (T_AsdlType)
sem_AsdlType_Sum (constrs_) =
    let _lhsOmkExpr :: (OC.Expr)
        _lhsOmkRecordExpr :: (OC.Expr)
        _constrsImkPatternClause :: ([OC.PatternClause])
        _constrsInumber :: (Int)
        _constrsOnumber :: (Int)
        ( _constrsImkPatternClause,_constrsInumber) =
            (constrs_ (_constrsOnumber))
        -- "OCamlGenAsdlPkl.ag"(line 56, column 7)
        (_constrsOnumber@_) =
            1
        -- "OCamlGenAsdlPkl.ag"(line 55, column 7)
        (_lhsOmkExpr@_) =
            OC.Match (var "x") _constrsImkPatternClause
        -- "OCamlGenAsdlPkl.ag"(line 65, column 7)
        (_lhsOmkRecordExpr@_) =
            error "mkRecordExpr (Sum) to do"
    in  ( _lhsOmkExpr,_lhsOmkRecordExpr)
-- Cardinality -------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      identity             : SELF

-}
{-
   local variables for Cardinality.One:
      identity

-}
{-
   local variables for Cardinality.Opt:
      identity

-}
{-
   local variables for Cardinality.Zom:
      identity

-}
-- semantic domain
type T_Cardinality = ( (Cardinality))
-- cata
sem_Cardinality :: (Cardinality) ->
                   (T_Cardinality)
sem_Cardinality ((One )) =
    (sem_Cardinality_One )
sem_Cardinality ((Opt )) =
    (sem_Cardinality_Opt )
sem_Cardinality ((Zom )) =
    (sem_Cardinality_Zom )
data Inh_Cardinality = Inh_Cardinality {}
data Syn_Cardinality = Syn_Cardinality {identity_Syn_Cardinality :: Cardinality}
wrap_Cardinality :: (T_Cardinality) ->
                    (Inh_Cardinality) ->
                    (Syn_Cardinality)
wrap_Cardinality (sem) ((Inh_Cardinality )) =
    let ( s1) =
            (sem )
    in  (Syn_Cardinality (s1))
sem_Cardinality_One :: (T_Cardinality)
sem_Cardinality_One  =
    let _lhsOidentity :: (Cardinality)
        -- self rule
        (_identity@_) =
            One
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity)
sem_Cardinality_Opt :: (T_Cardinality)
sem_Cardinality_Opt  =
    let _lhsOidentity :: (Cardinality)
        -- self rule
        (_identity@_) =
            Opt
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity)
sem_Cardinality_Zom :: (T_Cardinality)
sem_Cardinality_Zom  =
    let _lhsOidentity :: (Cardinality)
        -- self rule
        (_identity@_) =
            Zom
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity)
-- Constr ------------------------------------------------------
{-
   inherited attributes:
      number               : Int

   chained attributes:

   synthesised attributes:
      mkPatternClause      : OC.PatternClause

-}
{-
   local variables for Constr.Constr:

-}
-- semantic domain
type T_Constr = (Int) ->
                ( (OC.PatternClause))
-- cata
sem_Constr :: (Constr) ->
              (T_Constr)
sem_Constr ((Constr (_label) (_fields))) =
    (sem_Constr_Constr (_label) ((sem_Fields (_fields))))
data Inh_Constr = Inh_Constr {number_Inh_Constr :: Int}
data Syn_Constr = Syn_Constr {mkPatternClause_Syn_Constr :: OC.PatternClause}
wrap_Constr :: (T_Constr) ->
               (Inh_Constr) ->
               (Syn_Constr)
wrap_Constr (sem) ((Inh_Constr (i1))) =
    let ( s1) =
            (sem (i1))
    in  (Syn_Constr (s1))
sem_Constr_Constr :: (String) ->
                     (T_Fields) ->
                     (T_Constr)
sem_Constr_Constr (label_) (fields_) =
    \ _lhsInumber ->
        let _lhsOmkPatternClause :: (OC.PatternClause)
            _fieldsIcount :: (Int)
            _fieldsIrecordInfo :: ([(String, Cardinality, (Maybe String))])
            _fieldsItupleInfo :: ([(String, Cardinality)])
            ( _fieldsIcount,_fieldsIrecordInfo,_fieldsItupleInfo) =
                (fields_ )
            -- "OCamlGenAsdlPkl.ag"(line 78, column 7)
            (_lhsOmkPatternClause@_) =
                (patConstr label_ _fieldsIcount,
                  Nothing,
                  constrCode _lhsInumber _fieldsItupleInfo)
        in  ( _lhsOmkPatternClause)
-- Constrs -----------------------------------------------------
{-
   inherited attributes:

   chained attributes:
      number               : Int

   synthesised attributes:
      mkPatternClause      : [OC.PatternClause]

-}
{-
   local variables for Constrs.Cons:

-}
{-
   local variables for Constrs.Nil:

-}
-- semantic domain
type T_Constrs = (Int) ->
                 ( ([OC.PatternClause]),(Int))
-- cata
sem_Constrs :: (Constrs) ->
               (T_Constrs)
sem_Constrs (list) =
    (Prelude.foldr (sem_Constrs_Cons) (sem_Constrs_Nil) ((Prelude.map sem_Constr list)))
data Inh_Constrs = Inh_Constrs {number_Inh_Constrs :: Int}
data Syn_Constrs = Syn_Constrs {mkPatternClause_Syn_Constrs :: [OC.PatternClause],number_Syn_Constrs :: Int}
wrap_Constrs :: (T_Constrs) ->
                (Inh_Constrs) ->
                (Syn_Constrs)
wrap_Constrs (sem) ((Inh_Constrs (i1))) =
    let ( s1,s2) =
            (sem (i1))
    in  (Syn_Constrs (s1) (s2))
sem_Constrs_Cons :: (T_Constr) ->
                    (T_Constrs) ->
                    (T_Constrs)
sem_Constrs_Cons (hd_) (tl_) =
    \ _lhsInumber ->
        let _lhsOmkPatternClause :: ([OC.PatternClause])
            _lhsOnumber :: (Int)
            _hdImkPatternClause :: (OC.PatternClause)
            _hdOnumber :: (Int)
            _tlImkPatternClause :: ([OC.PatternClause])
            _tlInumber :: (Int)
            _tlOnumber :: (Int)
            ( _hdImkPatternClause) =
                (hd_ (_hdOnumber))
            ( _tlImkPatternClause,_tlInumber) =
                (tl_ (_tlOnumber))
            -- "OCamlGenAsdlPkl.ag"(line 127, column 13)
            (_tlOnumber@_) =
                _lhsInumber + 1
            -- use rule
            (_lhsOmkPatternClause@_) =
                _hdImkPatternClause : _tlImkPatternClause
            -- copy rule (up)
            (_lhsOnumber@_) =
                _tlInumber
            -- copy rule (down)
            (_hdOnumber@_) =
                _lhsInumber
        in  ( _lhsOmkPatternClause,_lhsOnumber)
sem_Constrs_Nil :: (T_Constrs)
sem_Constrs_Nil  =
    \ _lhsInumber ->
        let _lhsOmkPatternClause :: ([OC.PatternClause])
            _lhsOnumber :: (Int)
            -- use rule
            (_lhsOmkPatternClause@_) =
                []
            -- copy rule (chain)
            (_lhsOnumber@_) =
                _lhsInumber
        in  ( _lhsOmkPatternClause,_lhsOnumber)
-- Decl --------------------------------------------------------
{-
   inherited attributes:
      env                  : Env

   chained attributes:

   synthesised attributes:
      mkDef                : OC.Def

-}
{-
   local variables for Decl.Module:

-}
-- semantic domain
type T_Decl = (Env) ->
              ( (OC.Def))
-- cata
sem_Decl :: (Decl) ->
            (T_Decl)
sem_Decl ((Module (_name) (_defs))) =
    (sem_Decl_Module (_name) ((sem_Definitions (_defs))))
data Inh_Decl = Inh_Decl {env_Inh_Decl :: Env}
data Syn_Decl = Syn_Decl {mkDef_Syn_Decl :: OC.Def}
wrap_Decl :: (T_Decl) ->
             (Inh_Decl) ->
             (Syn_Decl)
wrap_Decl (sem) ((Inh_Decl (i1))) =
    let ( s1) =
            (sem (i1))
    in  (Syn_Decl (s1))
sem_Decl_Module :: (String) ->
                   (T_Definitions) ->
                   (T_Decl)
sem_Decl_Module (name_) (defs_) =
    \ _lhsIenv ->
        let _lhsOmkDef :: (OC.Def)
            _defsImkLetBinding :: ([OC.LetBinding])
            _defsOenv :: (Env)
            ( _defsImkLetBinding) =
                (defs_ (_defsOenv))
            -- "OCamlGenAsdlPkl.ag"(line 33, column 7)
            (_lhsOmkDef@_) =
                OC.MLetrec _defsImkLetBinding
            -- copy rule (down)
            (_defsOenv@_) =
                _lhsIenv
        in  ( _lhsOmkDef)
-- Decls -------------------------------------------------------
{-
   inherited attributes:
      env                  : Env

   chained attributes:

   synthesised attributes:
      mkDef                : [OC.Def]

-}
{-
   local variables for Decls.Cons:

-}
{-
   local variables for Decls.Nil:

-}
-- semantic domain
type T_Decls = (Env) ->
               ( ([OC.Def]))
-- cata
sem_Decls :: (Decls) ->
             (T_Decls)
sem_Decls (list) =
    (Prelude.foldr (sem_Decls_Cons) (sem_Decls_Nil) ((Prelude.map sem_Decl list)))
data Inh_Decls = Inh_Decls {env_Inh_Decls :: Env}
data Syn_Decls = Syn_Decls {mkDef_Syn_Decls :: [OC.Def]}
wrap_Decls :: (T_Decls) ->
              (Inh_Decls) ->
              (Syn_Decls)
wrap_Decls (sem) ((Inh_Decls (i1))) =
    let ( s1) =
            (sem (i1))
    in  (Syn_Decls (s1))
sem_Decls_Cons :: (T_Decl) ->
                  (T_Decls) ->
                  (T_Decls)
sem_Decls_Cons (hd_) (tl_) =
    \ _lhsIenv ->
        let _lhsOmkDef :: ([OC.Def])
            _hdImkDef :: (OC.Def)
            _hdOenv :: (Env)
            _tlImkDef :: ([OC.Def])
            _tlOenv :: (Env)
            ( _hdImkDef) =
                (hd_ (_hdOenv))
            ( _tlImkDef) =
                (tl_ (_tlOenv))
            -- use rule
            (_lhsOmkDef@_) =
                _hdImkDef : _tlImkDef
            -- copy rule (down)
            (_hdOenv@_) =
                _lhsIenv
            -- copy rule (down)
            (_tlOenv@_) =
                _lhsIenv
        in  ( _lhsOmkDef)
sem_Decls_Nil :: (T_Decls)
sem_Decls_Nil  =
    \ _lhsIenv ->
        let _lhsOmkDef :: ([OC.Def])
            -- use rule
            (_lhsOmkDef@_) =
                []
        in  ( _lhsOmkDef)
-- Definition --------------------------------------------------
{-
   inherited attributes:
      env                  : Env

   chained attributes:

   synthesised attributes:
      mkLetBinding         : OC.LetBinding

-}
{-
   local variables for Definition.Def:
      expr

-}
-- semantic domain
type T_Definition = (Env) ->
                    ( (OC.LetBinding))
-- cata
sem_Definition :: (Definition) ->
                  (T_Definition)
sem_Definition ((Def (_name) (_dtype))) =
    (sem_Definition_Def (_name) ((sem_AsdlType (_dtype))))
data Inh_Definition = Inh_Definition {env_Inh_Definition :: Env}
data Syn_Definition = Syn_Definition {mkLetBinding_Syn_Definition :: OC.LetBinding}
wrap_Definition :: (T_Definition) ->
                   (Inh_Definition) ->
                   (Syn_Definition)
wrap_Definition (sem) ((Inh_Definition (i1))) =
    let ( s1) =
            (sem (i1))
    in  (Syn_Definition (s1))
sem_Definition_Def :: (String) ->
                      (T_AsdlType) ->
                      (T_Definition)
sem_Definition_Def (name_) (dtype_) =
    \ _lhsIenv ->
        let _lhsOmkLetBinding :: (OC.LetBinding)
            _dtypeImkExpr :: (OC.Expr)
            _dtypeImkRecordExpr :: (OC.Expr)
            ( _dtypeImkExpr,_dtypeImkRecordExpr) =
                (dtype_ )
            -- "OCamlGenAsdlPkl.ag"(line 46, column 7)
            (_expr@_) =
                if (name_ `elem` _lhsIenv )
                then _dtypeImkRecordExpr
                else _dtypeImkExpr
            -- "OCamlGenAsdlPkl.ag"(line 42, column 7)
            (_lhsOmkLetBinding@_) =
                OC.ValueBinding ("write_" ++ name_)
                                [(param "x"), (param "s")]
                                Nothing
                                _expr
        in  ( _lhsOmkLetBinding)
-- Definitions -------------------------------------------------
{-
   inherited attributes:
      env                  : Env

   chained attributes:

   synthesised attributes:
      mkLetBinding         : [OC.LetBinding]

-}
{-
   local variables for Definitions.Cons:

-}
{-
   local variables for Definitions.Nil:

-}
-- semantic domain
type T_Definitions = (Env) ->
                     ( ([OC.LetBinding]))
-- cata
sem_Definitions :: (Definitions) ->
                   (T_Definitions)
sem_Definitions (list) =
    (Prelude.foldr (sem_Definitions_Cons) (sem_Definitions_Nil) ((Prelude.map sem_Definition list)))
data Inh_Definitions = Inh_Definitions {env_Inh_Definitions :: Env}
data Syn_Definitions = Syn_Definitions {mkLetBinding_Syn_Definitions :: [OC.LetBinding]}
wrap_Definitions :: (T_Definitions) ->
                    (Inh_Definitions) ->
                    (Syn_Definitions)
wrap_Definitions (sem) ((Inh_Definitions (i1))) =
    let ( s1) =
            (sem (i1))
    in  (Syn_Definitions (s1))
sem_Definitions_Cons :: (T_Definition) ->
                        (T_Definitions) ->
                        (T_Definitions)
sem_Definitions_Cons (hd_) (tl_) =
    \ _lhsIenv ->
        let _lhsOmkLetBinding :: ([OC.LetBinding])
            _hdImkLetBinding :: (OC.LetBinding)
            _hdOenv :: (Env)
            _tlImkLetBinding :: ([OC.LetBinding])
            _tlOenv :: (Env)
            ( _hdImkLetBinding) =
                (hd_ (_hdOenv))
            ( _tlImkLetBinding) =
                (tl_ (_tlOenv))
            -- use rule
            (_lhsOmkLetBinding@_) =
                _hdImkLetBinding : _tlImkLetBinding
            -- copy rule (down)
            (_hdOenv@_) =
                _lhsIenv
            -- copy rule (down)
            (_tlOenv@_) =
                _lhsIenv
        in  ( _lhsOmkLetBinding)
sem_Definitions_Nil :: (T_Definitions)
sem_Definitions_Nil  =
    \ _lhsIenv ->
        let _lhsOmkLetBinding :: ([OC.LetBinding])
            -- use rule
            (_lhsOmkLetBinding@_) =
                []
        in  ( _lhsOmkLetBinding)
-- Field -------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      recordInfo           : (String, Cardinality, (Maybe String))
      tupleInfo            : (String, Cardinality)

-}
{-
   local variables for Field.Field:

-}
-- semantic domain
type T_Field = ( ((String, Cardinality, (Maybe String))),((String, Cardinality)))
-- cata
sem_Field :: (Field) ->
             (T_Field)
sem_Field ((Field (_qual) (_ptype) (_card) (_opt_name))) =
    (sem_Field_Field ((sem_OptQualifier (_qual))) ((sem_AsdlPrim (_ptype))) ((sem_Cardinality (_card))) ((sem_OptIdentifier (_opt_name))))
data Inh_Field = Inh_Field {}
data Syn_Field = Syn_Field {recordInfo_Syn_Field :: (String, Cardinality, (Maybe String)),tupleInfo_Syn_Field :: (String, Cardinality)}
wrap_Field :: (T_Field) ->
              (Inh_Field) ->
              (Syn_Field)
wrap_Field (sem) ((Inh_Field )) =
    let ( s1,s2) =
            (sem )
    in  (Syn_Field (s1) (s2))
sem_Field_Field :: (T_OptQualifier) ->
                   (T_AsdlPrim) ->
                   (T_Cardinality) ->
                   (T_OptIdentifier) ->
                   (T_Field)
sem_Field_Field (qual_) (ptype_) (card_) (opt_name_) =
    let _lhsOrecordInfo :: ((String, Cardinality, (Maybe String)))
        _lhsOtupleInfo :: ((String, Cardinality))
        _ptypeIidentity :: (AsdlPrim)
        _ptypeIpklrname :: (String)
        _cardIidentity :: (Cardinality)
        _opt_nameIidentity :: (OptIdentifier)
        ( _ptypeIidentity,_ptypeIpklrname) =
            (ptype_ )
        ( _cardIidentity) =
            (card_ )
        ( _opt_nameIidentity) =
            (opt_name_ )
        -- "OCamlGenAsdlPkl.ag"(line 98, column 7)
        (_lhsOtupleInfo@_) =
            (_ptypeIpklrname, _cardIidentity)
        -- "OCamlGenAsdlPkl.ag"(line 108, column 7)
        (_lhsOrecordInfo@_) =
            (_ptypeIpklrname, _cardIidentity, _opt_nameIidentity)
    in  ( _lhsOrecordInfo,_lhsOtupleInfo)
-- Fields ------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      count                : Int
      recordInfo           : [(String, Cardinality, (Maybe String))]
      tupleInfo            : [(String, Cardinality)]

-}
{-
   local variables for Fields.Cons:

-}
{-
   local variables for Fields.Nil:

-}
-- semantic domain
type T_Fields = ( (Int),([(String, Cardinality, (Maybe String))]),([(String, Cardinality)]))
-- cata
sem_Fields :: (Fields) ->
              (T_Fields)
sem_Fields (list) =
    (Prelude.foldr (sem_Fields_Cons) (sem_Fields_Nil) ((Prelude.map sem_Field list)))
data Inh_Fields = Inh_Fields {}
data Syn_Fields = Syn_Fields {count_Syn_Fields :: Int,recordInfo_Syn_Fields :: [(String, Cardinality, (Maybe String))],tupleInfo_Syn_Fields :: [(String, Cardinality)]}
wrap_Fields :: (T_Fields) ->
               (Inh_Fields) ->
               (Syn_Fields)
wrap_Fields (sem) ((Inh_Fields )) =
    let ( s1,s2,s3) =
            (sem )
    in  (Syn_Fields (s1) (s2) (s3))
sem_Fields_Cons :: (T_Field) ->
                   (T_Fields) ->
                   (T_Fields)
sem_Fields_Cons (hd_) (tl_) =
    let _lhsOcount :: (Int)
        _lhsOrecordInfo :: ([(String, Cardinality, (Maybe String))])
        _lhsOtupleInfo :: ([(String, Cardinality)])
        _hdIrecordInfo :: ((String, Cardinality, (Maybe String)))
        _hdItupleInfo :: ((String, Cardinality))
        _tlIcount :: (Int)
        _tlIrecordInfo :: ([(String, Cardinality, (Maybe String))])
        _tlItupleInfo :: ([(String, Cardinality)])
        ( _hdIrecordInfo,_hdItupleInfo) =
            (hd_ )
        ( _tlIcount,_tlIrecordInfo,_tlItupleInfo) =
            (tl_ )
        -- "OCamlGenAsdlPkl.ag"(line 88, column 15)
        (_lhsOcount@_) =
            _tlIcount + 1
        -- use rule
        (_lhsOrecordInfo@_) =
            _hdIrecordInfo : _tlIrecordInfo
        -- use rule
        (_lhsOtupleInfo@_) =
            _hdItupleInfo : _tlItupleInfo
    in  ( _lhsOcount,_lhsOrecordInfo,_lhsOtupleInfo)
sem_Fields_Nil :: (T_Fields)
sem_Fields_Nil  =
    let _lhsOcount :: (Int)
        _lhsOrecordInfo :: ([(String, Cardinality, (Maybe String))])
        _lhsOtupleInfo :: ([(String, Cardinality)])
        -- "OCamlGenAsdlPkl.ag"(line 89, column 15)
        (_lhsOcount@_) =
            0
        -- use rule
        (_lhsOrecordInfo@_) =
            []
        -- use rule
        (_lhsOtupleInfo@_) =
            []
    in  ( _lhsOcount,_lhsOrecordInfo,_lhsOtupleInfo)
-- OptIdentifier -----------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      identity             : SELF

-}
{-
   local variables for OptIdentifier.Just:
      identity

-}
{-
   local variables for OptIdentifier.Nothing:
      identity

-}
-- semantic domain
type T_OptIdentifier = ( (OptIdentifier))
-- cata
sem_OptIdentifier :: (OptIdentifier) ->
                     (T_OptIdentifier)
sem_OptIdentifier ((Prelude.Just (x))) =
    (sem_OptIdentifier_Just (x))
sem_OptIdentifier (Prelude.Nothing) =
    sem_OptIdentifier_Nothing
data Inh_OptIdentifier = Inh_OptIdentifier {}
data Syn_OptIdentifier = Syn_OptIdentifier {identity_Syn_OptIdentifier :: OptIdentifier}
wrap_OptIdentifier :: (T_OptIdentifier) ->
                      (Inh_OptIdentifier) ->
                      (Syn_OptIdentifier)
wrap_OptIdentifier (sem) ((Inh_OptIdentifier )) =
    let ( s1) =
            (sem )
    in  (Syn_OptIdentifier (s1))
sem_OptIdentifier_Just :: (String) ->
                          (T_OptIdentifier)
sem_OptIdentifier_Just (just_) =
    let _lhsOidentity :: (OptIdentifier)
        -- self rule
        (_identity@_) =
            Just just_
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity)
sem_OptIdentifier_Nothing :: (T_OptIdentifier)
sem_OptIdentifier_Nothing  =
    let _lhsOidentity :: (OptIdentifier)
        -- self rule
        (_identity@_) =
            Nothing
        -- self rule
        (_lhsOidentity@_) =
            _identity
    in  ( _lhsOidentity)
-- OptQualifier ------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for OptQualifier.Just:

-}
{-
   local variables for OptQualifier.Nothing:

-}
-- semantic domain
type T_OptQualifier = ( )
-- cata
sem_OptQualifier :: (OptQualifier) ->
                    (T_OptQualifier)
sem_OptQualifier ((Prelude.Just (x))) =
    (sem_OptQualifier_Just (x))
sem_OptQualifier (Prelude.Nothing) =
    sem_OptQualifier_Nothing
data Inh_OptQualifier = Inh_OptQualifier {}
data Syn_OptQualifier = Syn_OptQualifier {}
wrap_OptQualifier :: (T_OptQualifier) ->
                     (Inh_OptQualifier) ->
                     (Syn_OptQualifier)
wrap_OptQualifier (sem) ((Inh_OptQualifier )) =
    let 
    in  (Syn_OptQualifier )
sem_OptQualifier_Just :: (String) ->
                         (T_OptQualifier)
sem_OptQualifier_Just (just_) =
    let 
    in  ( )
sem_OptQualifier_Nothing :: (T_OptQualifier)
sem_OptQualifier_Nothing  =
    let 
    in  ( )


