{-# LINE 1 "wrappers.hs" #-}
{-# LINE 1 "<built-in>" #-}
{-# LINE 1 "<command line>" #-}
{-# LINE 1 "wrappers.hs" #-}
-- -----------------------------------------------------------------------------
-- Alex wrapper code.
--
-- This code is in the PUBLIC DOMAIN; you may copy it freely and use
-- it for any purpose whatsoever.

-- -----------------------------------------------------------------------------
-- The input type


type AlexInput = (AlexPosn, 	-- current position,
                  Char,		-- previous char
                  String)	-- current input string


alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p,c,s) = c

alexGetChar :: AlexInput -> Maybe (Char,AlexInput)
alexGetChar (p,c,[]) = Nothing
alexGetChar (p,_,(c:s))  = let p' = alexMove p c in p' `seq`
				Just (c, (p', c, s))

-- -----------------------------------------------------------------------------
-- Token positions

-- `Posn' records the location of a token in the input text.  It has three
-- fields: the address (number of chacaters preceding the token), line number
-- and column of a token within the file. `start_pos' gives the position of the
-- start of the file and `eof_pos' a standard encoding for the end of file.
-- `move_pos' calculates the new position after traversing a given character,
-- assuming the usual eight character tab stops.

data AlexPosn = AlexPn !Int !Int !Int 
	deriving (Eq,Show)

alexStartPos :: AlexPosn
alexStartPos = AlexPn 0 1 1

alexMove :: AlexPosn -> Char -> AlexPosn
alexMove (AlexPn a l c) '\t' = AlexPn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (AlexPn a l c) '\n' = AlexPn (a+1) (l+1)   1
alexMove (AlexPn a l c) _    = AlexPn (a+1)  l     (c+1)


-- -----------------------------------------------------------------------------
-- Default monad


data AlexState = AlexState {
        alex_pos :: !AlexPosn,	-- position at current input location
        alex_inp :: String,	-- the current input
        alex_chr :: !Char,	-- the character before the input
        alex_scd :: !Int,  	-- the current startcode
        alex_line :: String	-- the current line for error messages
	}

-- Compile with -funbox-strict-fields for best results!

runAlex :: String -> Alex a -> Either String a
runAlex input (Alex f) = case f st of 
                           Left msg -> Left msg
                           Right ( _, a ) -> Right a
  where st = AlexState {alex_pos = alexStartPos,
 			            alex_inp = input,	
			            alex_chr = '\n',
			            alex_scd = 0,
			            alex_line = current input}
			
newtype Alex a = Alex { unAlex :: AlexState -> Either String (AlexState, a) }

instance Monad Alex where
  m >>= k  = Alex $ \s -> case unAlex m s of 
				Left msg -> Left msg
				Right (s',a) -> unAlex (k a) s'
  return a = Alex $ \s -> Right (s,a)

alexGetInput :: Alex AlexInput
alexGetInput
 = Alex $ \s@AlexState{alex_pos=pos,alex_chr=c,alex_inp=inp} -> 
	Right (s, (pos,c,inp))

alexSetInput :: AlexInput -> Alex ()
alexSetInput (pos,'\n',inp)
 = Alex $ \s -> case s{alex_pos=pos,alex_chr='\n',alex_inp=inp,alex_line=line} of
		  s@(AlexState{}) -> Right (s, ())
  where line = current inp		  
alexSetInput (pos,c,inp)
 = Alex $ \s -> case s{alex_pos=pos,alex_chr=c,alex_inp=inp} of
		  s@(AlexState{}) -> Right (s, ())
	
  

alexError :: String -> Alex a
alexError message = Alex $ \s -> Left message

alexGetStartCode :: Alex Int
alexGetStartCode = Alex $ \s@AlexState{alex_scd=sc} -> Right (s, sc)

alexSetStartCode :: Int -> Alex ()
alexSetStartCode sc = Alex $ \s -> Right (s{alex_scd=sc}, ())

alexGetLine :: Alex String
alexGetLine = Alex $ \s@AlexState{alex_line=ln} -> Right (s, ln)

current :: String -> String 
current s = takeWhile (/= '\n') s

alexMonadScan = 
  do{ inp <- alexGetInput
    ; sc <- alexGetStartCode  
    ; case alexScan inp sc of
      AlexEOF -> return alexEOF
      AlexError inp' -> do { line <- alexGetLine
                           ; alexError ("\n*** lexical error at "
                                        ++ position inp' ++ ":\n"
                                        ++ context inp' line)}
      AlexSkip  inp' len -> do{ alexSetInput inp'
                              ; alexMonadScan }
      AlexToken inp' len action -> do{ alexSetInput inp'
                                     ; action inp len }
    }


-- -----------------------------------------------------------------------------
-- Useful token actions

type AlexAction result = AlexInput -> Int -> result

-- just ignore this token and scan another one
-- skip :: AlexAction result
skip input len = alexMonadScan

-- ignore this token, but set the start code to a new value
-- begin :: Int -> AlexAction result
begin code input len = do alexSetStartCode code; alexMonadScan

-- perform an action for this token, and set the start code to a new value
-- andBegin :: AlexAction result -> Int -> AlexAction result
(action `andBegin` code) input len = do alexSetStartCode code; action input len

-- token :: (String -> Int -> token) -> AlexAction token
token t input len = return (t input len)


position :: AlexInput -> String
position ((AlexPn _ line col),_,_) 
  = "(line " ++ show line ++ ", column " ++ show col ++ ")"

context ((AlexPn _ _ col),_,rest) line = unlines (line:cursor:nextfive)
  where cursor  = replicate (col-1) ' ' ++ "^"
        nextfive = take 5 (drop 1 (lines rest))
  
		  
  

-- -----------------------------------------------------------------------------
-- Basic wrapper

{-# LINE 147 "wrappers.hs" #-}

-- -----------------------------------------------------------------------------
-- Posn wrapper

-- Adds text positions to the basic model.

{-# LINE 163 "wrappers.hs" #-}

-- -----------------------------------------------------------------------------
-- GScan wrapper

-- For compatibility with previous versions of Alex, and because we can.

