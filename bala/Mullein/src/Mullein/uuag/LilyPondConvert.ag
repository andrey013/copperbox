{

{-# LANGUAGE ScopedTypeVariables #-}
{-# OPTIONS -Wall #-}

--------------------------------------------------------------------------------
-- |
-- Module      :  Mullein.Gen.LilyPondConvert
-- Copyright   :  (c) Stephen Tetley 2009
-- License     :  BSD-style (as per the Haskell Hierarchical Libraries)
--
-- Maintainer  :  Stephen Tetley <stephen.tetley@gmail.com>
-- Stability   :  highly unstable
-- Portability :  to be determined.
--
-- Convert internal form to LilyPond 
--
--------------------------------------------------------------------------------
}

{
module Mullein.Gen.LilyPondConvert where

import Mullein.Duration
import qualified Mullein.Gen.LilyPondSyntax as Ly
import Mullein.Gen.Syntax
import Mullein.Pitch

-- import Data.Ratio

}

INCLUDE "SyntaxDEFS.ag"



-- Propagate relative duration to the elements 


ATTR AllBar AllUnison AllBracket AllElement [ | rduration : {Duration} | ]
ATTR Every [ | rpitch : {Pitch} | ]

ATTR Every [ trafoPitch : {(Pitch -> Pitch -> Pitch)} | | ]


-- Propagate the same initial duration (-1) to each bar.
-- This makes score more readable, the first note in each bar always has 
-- its printed.
-- (-1) insures that the first duration is always printed 
ATTR Motif [ | | rduration : {Duration} ]
SEM Motif
  | Motif       bars.rduration   = (-1)

SEM Elements 
  | Cons        tl.rduration   = @hd.getDuration


ATTR Element [ | | getDuration : {Duration} ]

SEM Element 
  | Note        lhs.getDuration = @duration
  | Rest        lhs.getDuration = @duration 
  | Spacer      lhs.getDuration = @duration
  | Chord       lhs.getDuration = @duration         
  | GraceNotes  lhs.getDuration = 0                             

SEM Elements 
  | Cons        tl.rpitch      = @hd.getPitch

ATTR Element GraceNotes GraceNote Pitches [ | | getPitch : {Pitch} ]

SEM Element 
  | Note        lhs.getPitch    = @pitch
  | Rest        lhs.getPitch    = @lhs.rpitch  -- just pass on rpitch 
  | Spacer      lhs.getPitch    = @lhs.rpitch
  | Chord       lhs.getPitch    = @pitches.getPitch       
  | GraceNotes  lhs.getPitch    = @graces.getPitch                             

-- First pitch of the list
SEM GraceNotes 
  | Cons        lhs.getPitch    = @hd.getPitch
  | Nil         lhs.getPitch    = @lhs.rpitch

SEM GraceNote
  | Tuple       lhs.getPitch    = @pch

-- First pitch of the list
SEM Pitches
  | Cons        lhs.getPitch    = @hd
  | Nil         lhs.getPitch    = @lhs.rpitch
 

-- Convert 

ATTR Motif [ | | convert : {Ly.Motif} ]

SEM Motif
  | Motif       lhs.convert    = Ly.Motif @time_sig @bars.convert


ATTR Bars [ | | convert USE {:} {[]} : {[Ly.Bar]} ]
ATTR Bar  [ | | convert : {Ly.Bar} ]


SEM Bar
  | Bar         lhs.convert    = Ly.Bar @one.convert
  | Overlay     lhs.convert    = Ly.Overlay @one.convert @orest.convert

ATTR Unisons [ | | convert USE {:} {[]} : {[Ly.Unison]} ]
ATTR Unison  [ | | convert : {Ly.Unison} ]


SEM Unison
  | Unison      lhs.convert    = Ly.Unison @pulses.convert @tied

ATTR Brackets [ | | convert USE {:} {[]} : {[Ly.Bracket]} ]
ATTR Bracket  [ | | convert : {Ly.Bracket} ]

SEM Bracket
  | Singleton   lhs.convert    = Ly.Singleton @elt.convert
  | Bracket     lhs.convert    = Ly.Bracket @elts.convert


ATTR Elements [ | | convert USE {:} {[]} : {[Ly.Element]} ]
ATTR Element  [ | | convert : {Ly.Element} ]

SEM Element
  | Note        lhs.convert   = let f = @lhs.trafoPitch  in 
                                Ly.Note (f @lhs.rpitch @pitch) 
                                        (relativeDuration @lhs.rduration @duration)
  | Rest        lhs.convert   = Ly.Rest $ relativeDuration @lhs.rduration @duration
  | Spacer      lhs.convert   = Ly.Spacer $ relativeDuration @lhs.rduration @duration
  | Chord       lhs.convert   = error "Ly.Chord"
  | GraceNotes  lhs.convert   = error "Ly.GraceNotes"




{

convertToLy :: (Pitch -> Pitch -> Pitch) -> Pitch -> Motif -> Ly.Motif
convertToLy pchFun relpitch e = convert_Syn_Motif synthesized 
  where
    synthesized = wrap_Motif (sem_Motif e) inherited
    inherited   = Inh_Motif { rpitch_Inh_Motif     = relpitch,
                              trafoPitch_Inh_Motif = pchFun   } 

relativeDuration :: Duration -> Duration -> Maybe Duration
relativeDuration ud drn | ud == drn = Nothing
                        | otherwise = Just drn


-- LilyPond middle c is c' (aka `c 1`)
-- Mullein middle c is c4
absPitch :: Pitch -> Pitch -> Pitch
absPitch _ (Pitch l a o) = Pitch l a (o-3)


relPitch :: Pitch -> Pitch -> Pitch
relPitch rel pch@(Pitch l a _) = Pitch l a (pch `octaveDist` rel)


}                
                
          