{

{-# LANGUAGE ScopedTypeVariables #-}

--------------------------------------------------------------------------------
-- |
-- Module      :  Mullein.Gen.LilyPondOutput
-- Copyright   :  (c) Stephen Tetley 2009
-- License     :  BSD-style (as per the Haskell Hierarchical Libraries)
--
-- Maintainer  :  Stephen Tetley <stephen.tetley@gmail.com>
-- Stability   :  highly unstable
-- Portability :  to be determined.
--
-- Pretty print LilyPond with an attribute grammar
--
--------------------------------------------------------------------------------
}

{
module Mullein.Gen.LilyPondOutput where

import Mullein.Gen.LilyPondSyntax
import Mullein.Duration
import Mullein.Pitch

import Text.PrettyPrint.Leijen 

}

INCLUDE "LilyPondSyntaxDEFS.ag"

ATTR Section Bar VoiceUnit Pulsation Element [ | | output : {Doc} ]

ATTR Bars VoiceUnits Pulsations Elements [ | | output USE {:} {[]} :{[Doc]} ]

SEM Section
  | Section     lhs.output     = hsep $ @bars.output

SEM Bar
  | Bar         lhs.output     = @voice.output
  | Overlay     lhs.output     = overlay @ovs.output


SEM VoiceUnit
  | VoiceUnit   lhs.output     = hsep @pulses.output <> 
                                   if @tied then char '~' else empty

SEM Pulsation
  | SingleElt   lhs.output     = @elt.output
  | BeamedGroup lhs.output     = lyBeam @elts.output



SEM Element
  | Note        lhs.output    = text "Note - TODO"                
  | Rest        lhs.output    = text "Rest - TODO"
  | Spacer      lhs.output    = text "Spacer - TODO"
  | Chord       lhs.output    = text "Chord - TODO"         
  | GraceNotes  lhs.output    = text "GraceNotes - TODO"
  | Nplet       lhs.output    = text "Nplet - TODO"


{



outputLy :: Section -> Doc
outputLy e = output_Syn_Section synthesized 
  where
    synthesized = wrap_Section (sem_Section e) inherited
    inherited   = Inh_Section  { } 


overlay :: [Doc] -> Doc
overlay = vsep . punctuate (text " &\\")    

{-
note :: PitchLetter -> Accidental -> Int -> Maybe Duration -> Doc 
note l a n d = pitchLabel p a <> octaveSpec n <> maybe empty d 
-}


-- lilypond middle c is c' 
-- HNotate middle c is c4
rescale :: Pitch -> Pitch
rescale (Pitch l a o)   = Pitch l a (o-3)

pitchLabel :: PitchLetter -> Accidental -> Doc
pitchLabel l a = char (toLowerLChar l) <> accidental a
  where 
    accidental :: Accidental -> Doc
    accidental Nat            = empty
    accidental Sharp          = text "is"
    accidental Flat           = text "es"
    accidental DoubleSharp    = text "isis"
    accidental DoubleFlat     = text "eses"


lyBeam :: [Doc] -> Doc
lyBeam (x:xs) = x <> char '[' <+> hsep xs <> char ']'
lyBeam []     = empty


}                
                
          