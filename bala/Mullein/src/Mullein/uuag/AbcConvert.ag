{

{-# LANGUAGE ScopedTypeVariables #-}

--------------------------------------------------------------------------------
-- |
-- Module      :  Mullein.Gen.AbcConvert
-- Copyright   :  (c) Stephen Tetley 2009
-- License     :  BSD-style (as per the Haskell Hierarchical Libraries)
--
-- Maintainer  :  Stephen Tetley <stephen.tetley@gmail.com>
-- Stability   :  highly unstable
-- Portability :  to be determined.
--
-- Convert internal representation to Abc representation
--
--------------------------------------------------------------------------------
}

{
module Mullein.Gen.AbcConvert where

import Mullein.Core
import Mullein.CoreTypes
import Mullein.Duration
import qualified Mullein.Gen.AbcSyntax as Abc
import Mullein.Gen.Syntax
import Mullein.Pitch

import Data.Ratio
import Text.PrettyPrint.Leijen 

}

INCLUDE "SyntaxDEFS.ag"

ATTR Every [ unitnl : {Duration} | | ]
ATTR Every [ labels : {LabelSet} | | ]

ATTR Part [ | | convert : {Abc.Part} ]

SEM Part
  | Part        lhs.convert   = Abc.Part @phrases.convert

ATTR Phrases [ | | convert USE {:} {[]} : {[Abc.Phrase]} ]

ATTR Phrase [ | | convert : {Abc.Phrase} ]

SEM Phrase
  | Phrase      lhs.convert   = Abc.Phrase @body.convert
  | Repeated    lhs.convert   = Abc.Repeated @body.convert
  | FSRepeat    lhs.convert   = Abc.FSRepeat @body.convert 
                                             @fst_rep.convert
                                             @snd_rep.convert
                                                       
ATTR Motif [ | | convert : {Abc.Motif} ]

SEM Motif
  | Motif       lhs.convert    = Abc.Motif @time_sig @bars.convert


ATTR Bars [ | | convert USE {:} {[]} : {[Abc.Bar]} ]
ATTR Bar  [ | | convert : {Abc.Bar} ]


SEM Bar
  | Bar         lhs.convert    = Abc.Bar @one.convert
  | Overlay     lhs.convert    = Abc.Overlay @one.convert @orest.convert

ATTR Unisons [ | | convert USE {:} {[]} : {[Abc.Unison]} ]
ATTR Unison  [ | | convert : {Abc.Unison} ]


SEM Unison
  | Unison      lhs.convert    = Abc.Unison @pulses.convert @tied

ATTR Brackets [ | | convert USE {:} {[]} : {[Abc.Bracket]} ]
ATTR Bracket  [ | | convert : {Abc.Bracket} ]

SEM Bracket
  | Singleton   lhs.convert    = Abc.Singleton @elt.convert
  | Bracket     lhs.convert    = Abc.Bracket @elts.convert


ATTR Elements [ | | convert USE {:} {[]} : {[Abc.Element]} ]
ATTR Element  [ | | convert : {Abc.Element} ]

SEM Element
  | Note        lhs.convert   = Abc.Note (naturalize @lhs.labels @pitch) 
                                         (unitRescale @lhs.unitnl @duration)
  | Rest        lhs.convert   = Abc.Rest (unitRescale @lhs.unitnl @duration)
  | Spacer      lhs.convert   = Abc.Spacer (unitRescale @lhs.unitnl @duration)
  | Chord       lhs.convert   = error "Abc.Chord"
  | GraceNotes  lhs.convert   = error "Abc.GraceNotes"

{

convertToAbc :: LabelSet -> Duration -> Part -> Abc.Part
convertToAbc lset unl e = convert_Syn_Part synthesized 
  where
    synthesized = wrap_Part (sem_Part e) inherited
    inherited   = Inh_Part { unitnl_Inh_Part = unl,
                             labels_Inh_Part = lset } 

unitRescale :: Duration -> Duration -> Duration
unitRescale unl drn = (dn%dd) / (un%ud) where
    (dn,dd)  = ratioElements drn
    (un,ud)  = ratioElements unl
    

}                
                
          