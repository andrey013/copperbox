{-# LANGUAGE EmptyDataDecls             #-}
{-# LANGUAGE MultiParamTypeClasses      #-}
{-# OPTIONS -Wall #-}

--------------------------------------------------------------------------------
-- |
-- Module      :  Mullein.AbcDoc
-- Copyright   :  (c) Stephen Tetley 2009
-- License     :  BSD3
--
-- Maintainer  :  Stephen Tetley <stephen.tetley@gmail.com>
-- Stability   :  highly unstable
-- Portability :  to be determined.
--
-- Document combinators for ABC.
--
-- This module provides only a minimal set of ABC fields - essentially
-- ones that reflect values used in the rendering process (Meter and Key) 
-- which must be passed to ABC for the final output; and trivial fields 
-- with string information (e.g. Title).
-- 
-- Other fields (e.g Parts and Unit Note Length) are not provided. These
-- have values that affect the final ABC output from @abcm2ps@, but no 
-- representation in Mullein's generation process. Adding them to a generated
-- score would likely create unexpected results.
--
--------------------------------------------------------------------------------


module Mullein.AbcDoc where

import Mullein.AbcOutput ( AbcOutput(..), field, keyField, meterField ) 
import Mullein.CoreTypes
import Mullein.Duration

import Text.PrettyPrint.Leijen 


data CtxField


-- | @X field@ - reference \/ tune number.
tunenum :: Int -> P CtxField
tunenum = P . field 'X' . int

-- | @T field@ - title. 
title :: String -> P CtxField
title = P . field 'T' . text

-- | @B field@ - book.
book :: String -> P CtxField
book = P . field 'B' . text

-- | @C field@ - composer name.
composer :: String -> P CtxField
composer = P . field 'C' . text

-- | @M field@ - meter.
-- Note - the meter parameter should correspond to the meter component
-- of the @MetricalSpec@ used to generate the ABC tune.
meterinfo :: Meter -> P CtxField
meterinfo = P . meterField

-- | @Q field@ - tempo.
-- Note - the range of ABC tempos is very wide, therefore no attempt
-- is made to encapsulate /tempo/ as an abstract datatype. Instead
-- tempo is just a string literal. If you want to use a genuine literal
-- (e.g. Andante) make sure you double-quote it first.
tempo :: String -> P CtxField
tempo = P . field 'Q' . text

-- | @K field@ - key.
-- Note - the key parameter should correspond to the key used to 
-- generate the ABC tune.
keyinfo :: Key -> P CtxField
keyinfo = P . keyField  


-- | Output a tune generated by the @generateAbc@ function.
tune :: AbcOutput -> P CtxField
tune = P . getAbcOutput


instance Concat CtxField CtxField where
  (+++) a b = P $ unP a <$> unP b