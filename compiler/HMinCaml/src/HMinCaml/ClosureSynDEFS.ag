-- HMinCaml.ClosureSynDEFS

DATA Closure 
  | Closure     entry     : {Label} 
                actual_fv : {[Id]}

  

DATA Expr 
  | Unit
  | Int         val       : {Int}
  | Float       val       : {Float}
  | Neg         x         : {Id}
  | Add         x         : {Id}  
                y         : {Id}
  | Sub         x         : {Id}  
                y         : {Id}
  | FNeg        x         : {Id}
  | FAdd        x         : {Id}  
                y         : {Id}
  | FSub        x         : {Id}  
                y         : {Id}
  | FMul        x         : {Id}  
                y         : {Id}
  | FDiv        x         : {Id}  
                y         : {Id}
  | IfEq        x         : {Id}  
                y         : {Id}  
                texpr     : Expr  
                eexpr     : Expr
  | IfLE        x         : {Id}  
                y         : {Id}  
                texpr     : Expr  
                eexpr     : Expr
  | Let         tyid      : TypeId
                sub       : Expr
                body      : Expr
  | Var         x         : {Id}
  | MakeCls     tyid      : TypeId
                close     : Closure 
                body      : Expr
  | AppCls      ref       : Id          -- closure-based function call
                args      : {[Id]}
  | AppDir      lbl       : {Label}     -- direct function call
                args      : {[Id]}
  | Tuple       refs      : {[Id]}
  | LetTuple    tyids     : TypeIds
                ref       : {Id}
                body      : Expr
  | Get         aref      : {Id}  
                iref      : {Id}
  | Put         aref      : {Id}  
                iref      : {Id}
                vref      : {Id}
  | ExtArray    lbl       : {Label}

    
DATA Fundef 
  | Fundef      name      : LabeledType
                args      : TypeIds
                formal_fv : TypeIds
                body      : Expr 

  
DATA Prog 
  | Prog        defs      : Fundefs 
                body      : Expr

TYPE Fundefs    = [Fundef]
  



     