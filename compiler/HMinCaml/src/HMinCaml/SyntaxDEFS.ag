
-- HMinCaml.SyntaxDEFS


DATA Expr 
  | Unit
  | Bool        val     : {Bool}
  | Int         val     : {Int}
  | Float       val     : {Float}
  | Not         expr    : Expr
  | Neg         expr    : Expr
  | Add         expr1   : Expr  
                expr2   : Expr
  | Sub         expr1   : Expr  
                expr2   : Expr
  | FNeg        expr    : Expr
  | FAdd        expr1   : Expr  
                expr2   : Expr
  | FSub        expr1   : Expr  
                expr2   : Expr
  | FMul        expr1   : Expr  
                expr2   : Expr
  | FDiv        expr1   : Expr  
                expr2   : Expr
  | Eq          expr1   : Expr  
                expr2   : Expr
  | LE          expr1   : Expr  
                expr2   : Expr
  | If          econd   : Expr  
                ethen   : Expr  
                eelse   : Expr
  | Let         varName : TypeId
                sub     : Expr  
                body    : Expr
  | Var         var     : {Id}
  | LetRec      funDef  : Fundef    
                body    : Expr
  | App         expr    : Expr
                args    : Exprs
  | Tuple       elts    : Exprs
  | LetTuple    idents  : TypeIds  
                sub     : Expr  
                body    : Expr
  | Array       expr1   : Expr  
                expr2   : Expr
  | Get         aexpr   : Expr  
                iexpr   : Expr
  | Put         aexpr   : Expr  
                ixexpr  : Expr  
                vexpr   : Expr

  
DATA Fundef 
  | Fundef      name    : TypeId
                args    : TypeIds
                body    : Expr 



TYPE Exprs      = [Expr]        

