{
-- |
-- Module: HMinCaml.ToKNormal
-- License: as per original MinCaml
--
-- Maintainer: Stephen Tetley <stephen.tetley@gmail.com>
-- Stability: unstable
-- Portability: ghc
--
-- K Normal form datatypes
--
}

{
module HMinCaml.ToKNormal where

import HMinCaml.Id
import qualified HMinCaml.KNormal.KNormalSyn as K
import qualified HMinCaml.M as M
import qualified HMinCaml.S as S
import HMinCaml.Syntax
import HMinCaml.Type

}

INCLUDE "SyntaxDEFS.ag"

ATTR Expr [ | | knormal : { K.Expr} ]

SEM Expr
  | *     lhs.knormal   = undefined


{



knormal :: Expr -> K.Expr
knormal expr = knormal_Syn_Expr synthesized
  where
    synthesized = wrap_Expr (sem_Expr expr) inherited
    inherited   = Inh_Expr {  }

 
} 