-- HMinCaml.SparcAsmDEFS


DATA Id_or_Imm 
  | V           ident     : {Id} 
  | C           value     : {Int}


DATA SparcT
  | Ans         expr      : Expr
  | Let         tyid      : TypeId   
                expr      : Expr  
                body      : SparcT
  | Forget      ident     : Id          
                body      : SparcT              {- virtual instruction -}
  
DATA Expr
  | Nop
  | Set         val       : {Int}
  | SetL        lbl       : {Id}
  | Mov         lbl       : {Id}
  | Neg         lbl       : {Id}
  | Add         lbl       : {Id}
                vlbl      : Id_or_Imm
  | Sub         lbl       : {Id}
                vlbl      : Id_or_Imm
  | SLL         lbl       : {Id}
                vlbl      : Id_or_Imm
  | Ld          lbl       : {Id}
                vlbl      : Id_or_Imm
  | St          lbl1      : {Id} 
                lbl2      : {Id}
                vlbl      : Id_or_Imm
  | FMovD       lbl       : {Id}
  | FNegD       lbl       : {Id}
  | FAddD       lbl1      : {Id} 
                lbl2      : {Id}
  | FSubD       lbl1      : {Id} 
                lbl2      : {Id}
  | FMulD       lbl1      : {Id} 
                lbl2      : {Id}
  | FDivD       lbl1      : {Id} 
                lbl2      : {Id}
  | LdDF        lbl       : {Id}
                vlbl      : Id_or_Imm
  | StDF        lbl1      : {Id} 
                lbl2      : {Id}
                vlbl      : Id_or_Imm
  | Comment     msg       : String
  {- virtual instructions -}
  | IfEq        lbl       : {Id} 
                vlbl      : Id_or_Imm  
                ins1      : SparcT 
                ins2      : SparcT
  | IfLE        lbl       : {Id} 
                vlbl      : Id_or_Imm  
                ins1      : SparcT 
                ins2      : SparcT
  | IfGE        lbl       : {Id} 
                vlbl      : Id_or_Imm  
                ins1      : SparcT 
                ins2      : SparcT
  | IfFEq       lbl1      : {Id} 
                lbl2      : {Id} 
                ins1      : SparcT 
                ins2      : SparcT
  | IfFLE       lbl1      : {Id} 
                lbl2      : {Id} 
                ins1      : SparcT 
                ins2      : SparcT
  {- closure address, integer arguments, and float arguments -}
  | CallCls     lbl       : {Id}
                xs        : {[Id]} 
                ys        : {[Id]}
  | CallDir     lbl       : {Label}
                xs        : {[Id]} 
                ys        : {[Id]}
  | Save        lbl1      : {Id} 
                lbl2      : {Id}
  | Restore     lbl       : {Id}

  
  
DATA Fundef 
  | Fundef      name      : {Label}
                args      : {[Id]}
                fargs     : {[Id]}
                body      : SparcT
                ret       : Type 
  

DATA Prog 
  | Prog        floats    : FloatConsts 
                fundefs   : Fundefs 
                instr     : SparcT

TYPE Fundefs      = [Fundef]
TYPE FloatConsts  = [FloatConst]  
TYPE FloatConst   = (label : {Label}, value : {Float})
   


